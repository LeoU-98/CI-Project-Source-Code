
Wave Generator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00000fa2  00001036  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000028  008001a4  008001a4  0000117a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000117a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ce  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000848  00000000  00000000  0000277e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a46  00000000  00000000  00002fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d4  00000000  00000000  00003a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058f  00000000  00000000  00003ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e34  00000000  00000000  0000426f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000050a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ea       	ldi	r30, 0xA2	; 162
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3a       	cpi	r26, 0xA4	; 164
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 ea       	ldi	r26, 0xA4	; 164
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 3c       	cpi	r26, 0xCC	; 204
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 cf 07 	jmp	0xf9e	; 0xf9e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


#define BAUD_RATE 9600

int main(void) {
	WAVE_Init();
  92:	0e 94 97 04 	call	0x92e	; 0x92e <WAVE_Init>
	
	sei();
  96:	78 94       	sei
	DDRB=0xff;
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	87 bb       	out	0x17, r24	; 23
	while (1)
	{
		//squareWave(255,255);
		WAVE_MainFunction();
  9c:	0e 94 db 04 	call	0x9b6	; 0x9b6 <WAVE_MainFunction>
  a0:	fd cf       	rjmp	.-6      	; 0x9c <main+0xa>

000000a2 <__vector_13>:
static volatile uint16_t rx_cnt;



ISR(USART_RXC_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	2f 93       	push	r18
  ae:	3f 93       	push	r19
  b0:	4f 93       	push	r20
  b2:	5f 93       	push	r21
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
    uint8_t rx_data;
    
    cli();
  bc:	f8 94       	cli
    
    /* Read rx_data. */
    rx_data = UDR;
  be:	8c b1       	in	r24, 0x0c	; 12
    
    /* Ignore spaces */
    if((rx_cnt < rx_len) && (rx_data != ' '))
  c0:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <__data_end>
  c4:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <__data_end+0x1>
  c8:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <rx_len>
  cc:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <rx_len+0x1>
  d0:	42 17       	cp	r20, r18
  d2:	53 07       	cpc	r21, r19
  d4:	b0 f4       	brcc	.+44     	; 0x102 <__vector_13+0x60>
  d6:	80 32       	cpi	r24, 0x20	; 32
  d8:	a1 f0       	breq	.+40     	; 0x102 <__vector_13+0x60>
    {
        rx_buffer[rx_cnt] = rx_data;
  da:	20 91 a4 01 	lds	r18, 0x01A4	; 0x8001a4 <__data_end>
  de:	30 91 a5 01 	lds	r19, 0x01A5	; 0x8001a5 <__data_end+0x1>
  e2:	e0 91 a8 01 	lds	r30, 0x01A8	; 0x8001a8 <rx_buffer>
  e6:	f0 91 a9 01 	lds	r31, 0x01A9	; 0x8001a9 <rx_buffer+0x1>
  ea:	e2 0f       	add	r30, r18
  ec:	f3 1f       	adc	r31, r19
  ee:	80 83       	st	Z, r24
        rx_cnt++;
  f0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <__data_end>
  f4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <__data_end+0x1>
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <__data_end+0x1>
  fe:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <__data_end>
    else
    {
        /* Do nothing. */
    }
    
    sei();
 102:	78 94       	sei
}
 104:	ff 91       	pop	r31
 106:	ef 91       	pop	r30
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	5f 91       	pop	r21
 10e:	4f 91       	pop	r20
 110:	3f 91       	pop	r19
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_15>:

ISR(USART_TXC_vect)
{
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	2f 93       	push	r18
 12a:	3f 93       	push	r19
 12c:	8f 93       	push	r24
 12e:	9f 93       	push	r25
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
    cli();
 134:	f8 94       	cli
    
    tx_cnt++;
 136:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tx_cnt>
 13a:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <tx_cnt+0x1>
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <tx_cnt+0x1>
 144:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <tx_cnt>
    
    if(tx_cnt < tx_len)
 148:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <tx_cnt>
 14c:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <tx_cnt+0x1>
 150:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <tx_len>
 154:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <tx_len+0x1>
 158:	28 17       	cp	r18, r24
 15a:	39 07       	cpc	r19, r25
 15c:	60 f4       	brcc	.+24     	; 0x176 <__vector_15+0x58>
    {
        /* Send next byte. */
        UDR = tx_buffer[tx_cnt];
 15e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <tx_cnt>
 162:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <tx_cnt+0x1>
 166:	e0 91 ae 01 	lds	r30, 0x01AE	; 0x8001ae <tx_buffer>
 16a:	f0 91 af 01 	lds	r31, 0x01AF	; 0x8001af <tx_buffer+0x1>
 16e:	e8 0f       	add	r30, r24
 170:	f9 1f       	adc	r31, r25
 172:	80 81       	ld	r24, Z
 174:	8c b9       	out	0x0c, r24	; 12
    }
    sei();
 176:	78 94       	sei
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <UART_Init>:


void UART_Init(UART_cfg *my_cfg)
{
 18e:	fc 01       	movw	r30, r24
    /* Set baud rate */
    UBRRH = my_cfg->UBRRH_cfg;
 190:	80 81       	ld	r24, Z
 192:	80 bd       	out	0x20, r24	; 32
    UBRRL = my_cfg->UBRRL_cfg;
 194:	81 81       	ldd	r24, Z+1	; 0x01
 196:	89 b9       	out	0x09, r24	; 9
    
    UCSRA = my_cfg->UCSRA_cfg;
 198:	82 81       	ldd	r24, Z+2	; 0x02
 19a:	8b b9       	out	0x0b, r24	; 11
    UCSRB = my_cfg->UCSRB_cfg;
 19c:	83 81       	ldd	r24, Z+3	; 0x03
 19e:	8a b9       	out	0x0a, r24	; 10
    UCSRC = my_cfg->UCSRC_cfg;
 1a0:	84 81       	ldd	r24, Z+4	; 0x04
 1a2:	80 bd       	out	0x20, r24	; 32
 1a4:	08 95       	ret

000001a6 <UART_SendPayload>:
    
}

void UART_SendPayload(uint8_t *tx_data, uint16_t len)
{
    tx_buffer = tx_data;
 1a6:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <tx_buffer+0x1>
 1aa:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <tx_buffer>
    tx_len    = len;
 1ae:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <tx_len+0x1>
 1b2:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <tx_len>
    tx_cnt    = 0;
 1b6:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <tx_cnt+0x1>
 1ba:	10 92 aa 01 	sts	0x01AA, r1	; 0x8001aa <tx_cnt>
    
    /* Wait for UDR is empty. */
    while(0 == (UCSRA & (1 << UDRE)));
 1be:	5d 9b       	sbis	0x0b, 5	; 11
 1c0:	fe cf       	rjmp	.-4      	; 0x1be <UART_SendPayload+0x18>
    
    /* Send the first byte to trigger the TxC interrupt. */
    UDR = tx_buffer[0];
 1c2:	fc 01       	movw	r30, r24
 1c4:	80 81       	ld	r24, Z
 1c6:	8c b9       	out	0x0c, r24	; 12
 1c8:	08 95       	ret

000001ca <UART_ReceivePayload>:
    
}

void UART_ReceivePayload(uint8_t *rx_data, uint16_t len)
{
    rx_buffer = rx_data;
 1ca:	90 93 a9 01 	sts	0x01A9, r25	; 0x8001a9 <rx_buffer+0x1>
 1ce:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <rx_buffer>
    rx_len    = len;
 1d2:	70 93 a7 01 	sts	0x01A7, r23	; 0x8001a7 <rx_len+0x1>
 1d6:	60 93 a6 01 	sts	0x01A6, r22	; 0x8001a6 <rx_len>
    rx_cnt    = 0;
 1da:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <__data_end+0x1>
 1de:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <__data_end>
 1e2:	08 95       	ret

000001e4 <UART_IsTxComplete>:
}

uint8_t UART_IsTxComplete(void)
{
    return ( (tx_cnt >= tx_len) ? 1 : 0 );
 1e4:	40 91 aa 01 	lds	r20, 0x01AA	; 0x8001aa <tx_cnt>
 1e8:	50 91 ab 01 	lds	r21, 0x01AB	; 0x8001ab <tx_cnt+0x1>
 1ec:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <tx_len>
 1f0:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <tx_len+0x1>
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	42 17       	cp	r20, r18
 1f8:	53 07       	cpc	r21, r19
 1fa:	08 f4       	brcc	.+2      	; 0x1fe <UART_IsTxComplete+0x1a>
 1fc:	80 e0       	ldi	r24, 0x00	; 0
}
 1fe:	08 95       	ret

00000200 <UART_IsRxComplete>:

uint8_t UART_IsRxComplete(void)
{
    return ( (rx_cnt >= rx_len) ? 1 : 0 );
 200:	40 91 a4 01 	lds	r20, 0x01A4	; 0x8001a4 <__data_end>
 204:	50 91 a5 01 	lds	r21, 0x01A5	; 0x8001a5 <__data_end+0x1>
 208:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <rx_len>
 20c:	30 91 a7 01 	lds	r19, 0x01A7	; 0x8001a7 <rx_len+0x1>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	42 17       	cp	r20, r18
 214:	53 07       	cpc	r21, r19
 216:	08 f4       	brcc	.+2      	; 0x21a <UART_IsRxComplete+0x1a>
 218:	80 e0       	ldi	r24, 0x00	; 0
}
 21a:	08 95       	ret

0000021c <squareWave>:
		  165, 160, 155, 150, 145, 140, 135, 130, 125, 120, 115, 110, 105, 100, 95, 90, 85, 80, 75, 70, 65, 60, 55, 50, 
		  45, 40, 35, 30, 25, 20, 15, 10, 5, 0
		};
	
volatile void squareWave(uint8_t amp, uint8_t freq)
{
 21c:	8f 92       	push	r8
 21e:	9f 92       	push	r9
 220:	af 92       	push	r10
 222:	bf 92       	push	r11
 224:	ff 92       	push	r15
 226:	0f 93       	push	r16
 228:	1f 93       	push	r17
 22a:	cf 93       	push	r28
 22c:	df 93       	push	r29
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	2e 97       	sbiw	r28, 0x0e	; 14
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	f8 94       	cli
 238:	de bf       	out	0x3e, r29	; 62
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	cd bf       	out	0x3d, r28	; 61
 23e:	f8 2e       	mov	r15, r24
	volatile double time=1.0/(double)freq;
 240:	70 e0       	ldi	r23, 0x00	; 0
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 86 06 	call	0xd0c	; 0xd0c <__floatunsisf>
 24a:	9b 01       	movw	r18, r22
 24c:	ac 01       	movw	r20, r24
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	80 e8       	ldi	r24, 0x80	; 128
 254:	9f e3       	ldi	r25, 0x3F	; 63
 256:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 25a:	69 83       	std	Y+1, r22	; 0x01
 25c:	7a 83       	std	Y+2, r23	; 0x02
 25e:	8b 83       	std	Y+3, r24	; 0x03
 260:	9c 83       	std	Y+4, r25	; 0x04
	volatile int samples=2;
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	9e 83       	std	Y+6, r25	; 0x06
 268:	8d 83       	std	Y+5, r24	; 0x05
	volatile double time_per_sample=time/(double) samples;
 26a:	89 80       	ldd	r8, Y+1	; 0x01
 26c:	9a 80       	ldd	r9, Y+2	; 0x02
 26e:	ab 80       	ldd	r10, Y+3	; 0x03
 270:	bc 80       	ldd	r11, Y+4	; 0x04
 272:	6d 81       	ldd	r22, Y+5	; 0x05
 274:	7e 81       	ldd	r23, Y+6	; 0x06
 276:	07 2e       	mov	r0, r23
 278:	00 0c       	add	r0, r0
 27a:	88 0b       	sbc	r24, r24
 27c:	99 0b       	sbc	r25, r25
 27e:	0e 94 88 06 	call	0xd10	; 0xd10 <__floatsisf>
 282:	9b 01       	movw	r18, r22
 284:	ac 01       	movw	r20, r24
 286:	c5 01       	movw	r24, r10
 288:	b4 01       	movw	r22, r8
 28a:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 28e:	6f 83       	std	Y+7, r22	; 0x07
 290:	78 87       	std	Y+8, r23	; 0x08
 292:	89 87       	std	Y+9, r24	; 0x09
 294:	9a 87       	std	Y+10, r25	; 0x0a
	volatile double time_per_sample_us=1000000*time_per_sample/2.3;
 296:	6f 81       	ldd	r22, Y+7	; 0x07
 298:	78 85       	ldd	r23, Y+8	; 0x08
 29a:	89 85       	ldd	r24, Y+9	; 0x09
 29c:	9a 85       	ldd	r25, Y+10	; 0x0a
 29e:	20 e0       	ldi	r18, 0x00	; 0
 2a0:	34 e2       	ldi	r19, 0x24	; 36
 2a2:	44 e7       	ldi	r20, 0x74	; 116
 2a4:	59 e4       	ldi	r21, 0x49	; 73
 2a6:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
 2aa:	23 e3       	ldi	r18, 0x33	; 51
 2ac:	33 e3       	ldi	r19, 0x33	; 51
 2ae:	43 e1       	ldi	r20, 0x13	; 19
 2b0:	50 e4       	ldi	r21, 0x40	; 64
 2b2:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 2b6:	6b 87       	std	Y+11, r22	; 0x0b
 2b8:	7c 87       	std	Y+12, r23	; 0x0c
 2ba:	8d 87       	std	Y+13, r24	; 0x0d
 2bc:	9e 87       	std	Y+14, r25	; 0x0e
	uint32_t x=(uint32_t)time_per_sample_us;
 2be:	6b 85       	ldd	r22, Y+11	; 0x0b
 2c0:	7c 85       	ldd	r23, Y+12	; 0x0c
 2c2:	8d 85       	ldd	r24, Y+13	; 0x0d
 2c4:	9e 85       	ldd	r25, Y+14	; 0x0e
 2c6:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
 2ca:	8b 01       	movw	r16, r22
 2cc:	9c 01       	movw	r18, r24
	DAC_PORT=(uint32_t)(255*amp /255);
 2ce:	4f ef       	ldi	r20, 0xFF	; 255
 2d0:	f4 9e       	mul	r15, r20
 2d2:	c0 01       	movw	r24, r0
 2d4:	11 24       	eor	r1, r1
 2d6:	6f ef       	ldi	r22, 0xFF	; 255
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	0e 94 81 07 	call	0xf02	; 0xf02 <__divmodhi4>
 2de:	68 bb       	out	0x18, r22	; 24
	
	for(uint32_t i=0;i<x;i++)
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	dc 01       	movw	r26, r24
 2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <squareWave+0xda>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2e8:	42 e0       	ldi	r20, 0x02	; 2
 2ea:	4a 95       	dec	r20
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <squareWave+0xce>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <squareWave+0xd4>
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	a1 1d       	adc	r26, r1
 2f4:	b1 1d       	adc	r27, r1
 2f6:	80 17       	cp	r24, r16
 2f8:	91 07       	cpc	r25, r17
 2fa:	a2 07       	cpc	r26, r18
 2fc:	b3 07       	cpc	r27, r19
 2fe:	a0 f3       	brcs	.-24     	; 0x2e8 <squareWave+0xcc>
	{ _delay_us(1);}
	DAC_PORT=(0);
 300:	18 ba       	out	0x18, r1	; 24
	for(uint32_t i=0;i<x;i++)
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	dc 01       	movw	r26, r24
 308:	07 c0       	rjmp	.+14     	; 0x318 <squareWave+0xfc>
 30a:	42 e0       	ldi	r20, 0x02	; 2
 30c:	4a 95       	dec	r20
 30e:	f1 f7       	brne	.-4      	; 0x30c <squareWave+0xf0>
 310:	00 c0       	rjmp	.+0      	; 0x312 <squareWave+0xf6>
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	a1 1d       	adc	r26, r1
 316:	b1 1d       	adc	r27, r1
 318:	80 17       	cp	r24, r16
 31a:	91 07       	cpc	r25, r17
 31c:	a2 07       	cpc	r26, r18
 31e:	b3 07       	cpc	r27, r19
 320:	a0 f3       	brcs	.-24     	; 0x30a <squareWave+0xee>
	{_delay_us(1);}

}
 322:	2e 96       	adiw	r28, 0x0e	; 14
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	f8 94       	cli
 328:	de bf       	out	0x3e, r29	; 62
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	cd bf       	out	0x3d, r28	; 61
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	0f 91       	pop	r16
 336:	ff 90       	pop	r15
 338:	bf 90       	pop	r11
 33a:	af 90       	pop	r10
 33c:	9f 90       	pop	r9
 33e:	8f 90       	pop	r8
 340:	08 95       	ret

00000342 <staircaseWave>:

void staircaseWave(uint8_t amp, uint8_t freq)
{
 342:	8f 92       	push	r8
 344:	9f 92       	push	r9
 346:	af 92       	push	r10
 348:	bf 92       	push	r11
 34a:	ff 92       	push	r15
 34c:	0f 93       	push	r16
 34e:	1f 93       	push	r17
 350:	cf 93       	push	r28
 352:	df 93       	push	r29
 354:	cd b7       	in	r28, 0x3d	; 61
 356:	de b7       	in	r29, 0x3e	; 62
 358:	2e 97       	sbiw	r28, 0x0e	; 14
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	f8 94       	cli
 35e:	de bf       	out	0x3e, r29	; 62
 360:	0f be       	out	0x3f, r0	; 63
 362:	cd bf       	out	0x3d, r28	; 61
 364:	f8 2e       	mov	r15, r24
volatile double time=1.0/(double)freq;
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 86 06 	call	0xd0c	; 0xd0c <__floatunsisf>
 370:	9b 01       	movw	r18, r22
 372:	ac 01       	movw	r20, r24
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	80 e8       	ldi	r24, 0x80	; 128
 37a:	9f e3       	ldi	r25, 0x3F	; 63
 37c:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 380:	69 83       	std	Y+1, r22	; 0x01
 382:	7a 83       	std	Y+2, r23	; 0x02
 384:	8b 83       	std	Y+3, r24	; 0x03
 386:	9c 83       	std	Y+4, r25	; 0x04
volatile int samples=6;
 388:	86 e0       	ldi	r24, 0x06	; 6
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	9e 83       	std	Y+6, r25	; 0x06
 38e:	8d 83       	std	Y+5, r24	; 0x05
volatile double time_per_sample=time/(double) samples;
 390:	89 80       	ldd	r8, Y+1	; 0x01
 392:	9a 80       	ldd	r9, Y+2	; 0x02
 394:	ab 80       	ldd	r10, Y+3	; 0x03
 396:	bc 80       	ldd	r11, Y+4	; 0x04
 398:	6d 81       	ldd	r22, Y+5	; 0x05
 39a:	7e 81       	ldd	r23, Y+6	; 0x06
 39c:	07 2e       	mov	r0, r23
 39e:	00 0c       	add	r0, r0
 3a0:	88 0b       	sbc	r24, r24
 3a2:	99 0b       	sbc	r25, r25
 3a4:	0e 94 88 06 	call	0xd10	; 0xd10 <__floatsisf>
 3a8:	9b 01       	movw	r18, r22
 3aa:	ac 01       	movw	r20, r24
 3ac:	c5 01       	movw	r24, r10
 3ae:	b4 01       	movw	r22, r8
 3b0:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 3b4:	6f 83       	std	Y+7, r22	; 0x07
 3b6:	78 87       	std	Y+8, r23	; 0x08
 3b8:	89 87       	std	Y+9, r24	; 0x09
 3ba:	9a 87       	std	Y+10, r25	; 0x0a
volatile double time_per_sample_us=1000000*time_per_sample/2.3;
 3bc:	6f 81       	ldd	r22, Y+7	; 0x07
 3be:	78 85       	ldd	r23, Y+8	; 0x08
 3c0:	89 85       	ldd	r24, Y+9	; 0x09
 3c2:	9a 85       	ldd	r25, Y+10	; 0x0a
 3c4:	20 e0       	ldi	r18, 0x00	; 0
 3c6:	34 e2       	ldi	r19, 0x24	; 36
 3c8:	44 e7       	ldi	r20, 0x74	; 116
 3ca:	59 e4       	ldi	r21, 0x49	; 73
 3cc:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
 3d0:	23 e3       	ldi	r18, 0x33	; 51
 3d2:	33 e3       	ldi	r19, 0x33	; 51
 3d4:	43 e1       	ldi	r20, 0x13	; 19
 3d6:	50 e4       	ldi	r21, 0x40	; 64
 3d8:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 3dc:	6b 87       	std	Y+11, r22	; 0x0b
 3de:	7c 87       	std	Y+12, r23	; 0x0c
 3e0:	8d 87       	std	Y+13, r24	; 0x0d
 3e2:	9e 87       	std	Y+14, r25	; 0x0e
uint32_t x=(uint32_t)time_per_sample_us;
 3e4:	6b 85       	ldd	r22, Y+11	; 0x0b
 3e6:	7c 85       	ldd	r23, Y+12	; 0x0c
 3e8:	8d 85       	ldd	r24, Y+13	; 0x0d
 3ea:	9e 85       	ldd	r25, Y+14	; 0x0e
 3ec:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
 3f0:	8b 01       	movw	r16, r22
 3f2:	9c 01       	movw	r18, r24
	
    DAC_PORT = (int)(amp*0 /255);
 3f4:	18 ba       	out	0x18, r1	; 24
	for(uint32_t i=0;i<x;i++)
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	dc 01       	movw	r26, r24
 3fc:	07 c0       	rjmp	.+14     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 3fe:	42 e0       	ldi	r20, 0x02	; 2
 400:	4a 95       	dec	r20
 402:	f1 f7       	brne	.-4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	01 96       	adiw	r24, 0x01	; 1
 408:	a1 1d       	adc	r26, r1
 40a:	b1 1d       	adc	r27, r1
 40c:	80 17       	cp	r24, r16
 40e:	91 07       	cpc	r25, r17
 410:	a2 07       	cpc	r26, r18
 412:	b3 07       	cpc	r27, r19
 414:	a0 f3       	brcs	.-24     	; 0x3fe <staircaseWave+0xbc>
	{_delay_us(1);}
    DAC_PORT = (int)(amp*51 /255);
 416:	ef 2d       	mov	r30, r15
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	43 e3       	ldi	r20, 0x33	; 51
 41c:	4e 9f       	mul	r20, r30
 41e:	c0 01       	movw	r24, r0
 420:	4f 9f       	mul	r20, r31
 422:	90 0d       	add	r25, r0
 424:	11 24       	eor	r1, r1
 426:	6f ef       	ldi	r22, 0xFF	; 255
 428:	70 e0       	ldi	r23, 0x00	; 0
 42a:	0e 94 81 07 	call	0xf02	; 0xf02 <__divmodhi4>
 42e:	68 bb       	out	0x18, r22	; 24
		for(uint32_t i=0;i<x;i++)
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	ba 01       	movw	r22, r20
 436:	08 c0       	rjmp	.+16     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 438:	82 e0       	ldi	r24, 0x02	; 2
 43a:	8a 95       	dec	r24
 43c:	f1 f7       	brne	.-4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 440:	4f 5f       	subi	r20, 0xFF	; 255
 442:	5f 4f       	sbci	r21, 0xFF	; 255
 444:	6f 4f       	sbci	r22, 0xFF	; 255
 446:	7f 4f       	sbci	r23, 0xFF	; 255
 448:	40 17       	cp	r20, r16
 44a:	51 07       	cpc	r21, r17
 44c:	62 07       	cpc	r22, r18
 44e:	73 07       	cpc	r23, r19
 450:	98 f3       	brcs	.-26     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
	{_delay_us(1);}
    DAC_PORT = (int)(amp*102 /255);
 452:	46 e6       	ldi	r20, 0x66	; 102
 454:	4e 9f       	mul	r20, r30
 456:	c0 01       	movw	r24, r0
 458:	4f 9f       	mul	r20, r31
 45a:	90 0d       	add	r25, r0
 45c:	11 24       	eor	r1, r1
 45e:	6f ef       	ldi	r22, 0xFF	; 255
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	0e 94 81 07 	call	0xf02	; 0xf02 <__divmodhi4>
 466:	68 bb       	out	0x18, r22	; 24
    	for(uint32_t i=0;i<x;i++)
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	ba 01       	movw	r22, r20
 46e:	08 c0       	rjmp	.+16     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 470:	82 e0       	ldi	r24, 0x02	; 2
 472:	8a 95       	dec	r24
 474:	f1 f7       	brne	.-4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 476:	00 c0       	rjmp	.+0      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 478:	4f 5f       	subi	r20, 0xFF	; 255
 47a:	5f 4f       	sbci	r21, 0xFF	; 255
 47c:	6f 4f       	sbci	r22, 0xFF	; 255
 47e:	7f 4f       	sbci	r23, 0xFF	; 255
 480:	40 17       	cp	r20, r16
 482:	51 07       	cpc	r21, r17
 484:	62 07       	cpc	r22, r18
 486:	73 07       	cpc	r23, r19
 488:	98 f3       	brcs	.-26     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
    {_delay_us(1);}
    DAC_PORT = (int)(amp*153 /255);
 48a:	49 e9       	ldi	r20, 0x99	; 153
 48c:	4e 9f       	mul	r20, r30
 48e:	c0 01       	movw	r24, r0
 490:	4f 9f       	mul	r20, r31
 492:	90 0d       	add	r25, r0
 494:	11 24       	eor	r1, r1
 496:	6f ef       	ldi	r22, 0xFF	; 255
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	0e 94 81 07 	call	0xf02	; 0xf02 <__divmodhi4>
 49e:	68 bb       	out	0x18, r22	; 24
    	for(uint32_t i=0;i<x;i++)
 4a0:	40 e0       	ldi	r20, 0x00	; 0
 4a2:	50 e0       	ldi	r21, 0x00	; 0
 4a4:	ba 01       	movw	r22, r20
 4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4a8:	82 e0       	ldi	r24, 0x02	; 2
 4aa:	8a 95       	dec	r24
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 4b0:	4f 5f       	subi	r20, 0xFF	; 255
 4b2:	5f 4f       	sbci	r21, 0xFF	; 255
 4b4:	6f 4f       	sbci	r22, 0xFF	; 255
 4b6:	7f 4f       	sbci	r23, 0xFF	; 255
 4b8:	40 17       	cp	r20, r16
 4ba:	51 07       	cpc	r21, r17
 4bc:	62 07       	cpc	r22, r18
 4be:	73 07       	cpc	r23, r19
 4c0:	98 f3       	brcs	.-26     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
    {_delay_us(1);}
    DAC_PORT = (int)(amp*204 /255);
 4c2:	4c ec       	ldi	r20, 0xCC	; 204
 4c4:	4e 9f       	mul	r20, r30
 4c6:	c0 01       	movw	r24, r0
 4c8:	4f 9f       	mul	r20, r31
 4ca:	90 0d       	add	r25, r0
 4cc:	11 24       	eor	r1, r1
 4ce:	6f ef       	ldi	r22, 0xFF	; 255
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	0e 94 81 07 	call	0xf02	; 0xf02 <__divmodhi4>
 4d6:	68 bb       	out	0x18, r22	; 24
    	for(uint32_t i=0;i<x;i++)
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	50 e0       	ldi	r21, 0x00	; 0
 4dc:	ba 01       	movw	r22, r20
 4de:	08 c0       	rjmp	.+16     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	8a 95       	dec	r24
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4e8:	4f 5f       	subi	r20, 0xFF	; 255
 4ea:	5f 4f       	sbci	r21, 0xFF	; 255
 4ec:	6f 4f       	sbci	r22, 0xFF	; 255
 4ee:	7f 4f       	sbci	r23, 0xFF	; 255
 4f0:	40 17       	cp	r20, r16
 4f2:	51 07       	cpc	r21, r17
 4f4:	62 07       	cpc	r22, r18
 4f6:	73 07       	cpc	r23, r19
 4f8:	98 f3       	brcs	.-26     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
    {_delay_us(1);}
    DAC_PORT =(int)(amp*255 /255);
 4fa:	4f ef       	ldi	r20, 0xFF	; 255
 4fc:	4e 9f       	mul	r20, r30
 4fe:	c0 01       	movw	r24, r0
 500:	4f 9f       	mul	r20, r31
 502:	90 0d       	add	r25, r0
 504:	11 24       	eor	r1, r1
 506:	6f ef       	ldi	r22, 0xFF	; 255
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	0e 94 81 07 	call	0xf02	; 0xf02 <__divmodhi4>
 50e:	68 bb       	out	0x18, r22	; 24
    	for(uint32_t i=0;i<x;i++)
 510:	80 e0       	ldi	r24, 0x00	; 0
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	dc 01       	movw	r26, r24
 516:	07 c0       	rjmp	.+14     	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
 518:	42 e0       	ldi	r20, 0x02	; 2
 51a:	4a 95       	dec	r20
 51c:	f1 f7       	brne	.-4      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <__EEPROM_REGION_LENGTH__+0x120>
 520:	01 96       	adiw	r24, 0x01	; 1
 522:	a1 1d       	adc	r26, r1
 524:	b1 1d       	adc	r27, r1
 526:	80 17       	cp	r24, r16
 528:	91 07       	cpc	r25, r17
 52a:	a2 07       	cpc	r26, r18
 52c:	b3 07       	cpc	r27, r19
 52e:	a0 f3       	brcs	.-24     	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
    {_delay_us(1);}
}
 530:	2e 96       	adiw	r28, 0x0e	; 14
 532:	0f b6       	in	r0, 0x3f	; 63
 534:	f8 94       	cli
 536:	de bf       	out	0x3e, r29	; 62
 538:	0f be       	out	0x3f, r0	; 63
 53a:	cd bf       	out	0x3d, r28	; 61
 53c:	df 91       	pop	r29
 53e:	cf 91       	pop	r28
 540:	1f 91       	pop	r17
 542:	0f 91       	pop	r16
 544:	ff 90       	pop	r15
 546:	bf 90       	pop	r11
 548:	af 90       	pop	r10
 54a:	9f 90       	pop	r9
 54c:	8f 90       	pop	r8
 54e:	08 95       	ret

00000550 <triangleWave>:

void triangleWave(uint8_t amp, uint8_t freq)
{
 550:	8f 92       	push	r8
 552:	9f 92       	push	r9
 554:	af 92       	push	r10
 556:	bf 92       	push	r11
 558:	ff 92       	push	r15
 55a:	0f 93       	push	r16
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	cd b7       	in	r28, 0x3d	; 61
 564:	de b7       	in	r29, 0x3e	; 62
 566:	2e 97       	sbiw	r28, 0x0e	; 14
 568:	0f b6       	in	r0, 0x3f	; 63
 56a:	f8 94       	cli
 56c:	de bf       	out	0x3e, r29	; 62
 56e:	0f be       	out	0x3f, r0	; 63
 570:	cd bf       	out	0x3d, r28	; 61
 572:	f8 2e       	mov	r15, r24
volatile double time=1.0/(double)freq;
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	0e 94 86 06 	call	0xd0c	; 0xd0c <__floatunsisf>
 57e:	9b 01       	movw	r18, r22
 580:	ac 01       	movw	r20, r24
 582:	60 e0       	ldi	r22, 0x00	; 0
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	80 e8       	ldi	r24, 0x80	; 128
 588:	9f e3       	ldi	r25, 0x3F	; 63
 58a:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 58e:	69 83       	std	Y+1, r22	; 0x01
 590:	7a 83       	std	Y+2, r23	; 0x02
 592:	8b 83       	std	Y+3, r24	; 0x03
 594:	9c 83       	std	Y+4, r25	; 0x04
volatile int samples=104;
 596:	88 e6       	ldi	r24, 0x68	; 104
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	9e 83       	std	Y+6, r25	; 0x06
 59c:	8d 83       	std	Y+5, r24	; 0x05
volatile double time_per_sample=time/(double) samples;
 59e:	89 80       	ldd	r8, Y+1	; 0x01
 5a0:	9a 80       	ldd	r9, Y+2	; 0x02
 5a2:	ab 80       	ldd	r10, Y+3	; 0x03
 5a4:	bc 80       	ldd	r11, Y+4	; 0x04
 5a6:	6d 81       	ldd	r22, Y+5	; 0x05
 5a8:	7e 81       	ldd	r23, Y+6	; 0x06
 5aa:	07 2e       	mov	r0, r23
 5ac:	00 0c       	add	r0, r0
 5ae:	88 0b       	sbc	r24, r24
 5b0:	99 0b       	sbc	r25, r25
 5b2:	0e 94 88 06 	call	0xd10	; 0xd10 <__floatsisf>
 5b6:	9b 01       	movw	r18, r22
 5b8:	ac 01       	movw	r20, r24
 5ba:	c5 01       	movw	r24, r10
 5bc:	b4 01       	movw	r22, r8
 5be:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 5c2:	6f 83       	std	Y+7, r22	; 0x07
 5c4:	78 87       	std	Y+8, r23	; 0x08
 5c6:	89 87       	std	Y+9, r24	; 0x09
 5c8:	9a 87       	std	Y+10, r25	; 0x0a
volatile double time_per_sample_us=1000000*time_per_sample/10;
 5ca:	6f 81       	ldd	r22, Y+7	; 0x07
 5cc:	78 85       	ldd	r23, Y+8	; 0x08
 5ce:	89 85       	ldd	r24, Y+9	; 0x09
 5d0:	9a 85       	ldd	r25, Y+10	; 0x0a
 5d2:	20 e0       	ldi	r18, 0x00	; 0
 5d4:	34 e2       	ldi	r19, 0x24	; 36
 5d6:	44 e7       	ldi	r20, 0x74	; 116
 5d8:	59 e4       	ldi	r21, 0x49	; 73
 5da:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
 5de:	20 e0       	ldi	r18, 0x00	; 0
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	40 e2       	ldi	r20, 0x20	; 32
 5e4:	51 e4       	ldi	r21, 0x41	; 65
 5e6:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 5ea:	6b 87       	std	Y+11, r22	; 0x0b
 5ec:	7c 87       	std	Y+12, r23	; 0x0c
 5ee:	8d 87       	std	Y+13, r24	; 0x0d
 5f0:	9e 87       	std	Y+14, r25	; 0x0e
uint32_t x=(uint32_t)time_per_sample_us;
 5f2:	6b 85       	ldd	r22, Y+11	; 0x0b
 5f4:	7c 85       	ldd	r23, Y+12	; 0x0c
 5f6:	8d 85       	ldd	r24, Y+13	; 0x0d
 5f8:	9e 85       	ldd	r25, Y+14	; 0x0e
 5fa:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
 5fe:	8b 01       	movw	r16, r22
 600:	9c 01       	movw	r18, r24

	
	for(int Local_u8Iterator = 0 ; Local_u8Iterator < 104 ; Local_u8Iterator ++)
 602:	e0 e0       	ldi	r30, 0x00	; 0
 604:	f0 e0       	ldi	r31, 0x00	; 0
 606:	1d c0       	rjmp	.+58     	; 0x642 <triangleWave+0xf2>
	{
		DAC_PORT = (int)((amp*arr_triangle[Local_u8Iterator])/255) ;
 608:	df 01       	movw	r26, r30
 60a:	a0 5a       	subi	r26, 0xA0	; 160
 60c:	bf 4f       	sbci	r27, 0xFF	; 255
 60e:	8c 91       	ld	r24, X
 610:	f8 9e       	mul	r15, r24
 612:	c0 01       	movw	r24, r0
 614:	11 24       	eor	r1, r1
 616:	6f ef       	ldi	r22, 0xFF	; 255
 618:	70 e0       	ldi	r23, 0x00	; 0
 61a:	0e 94 81 07 	call	0xf02	; 0xf02 <__divmodhi4>
 61e:	68 bb       	out	0x18, r22	; 24
			for(uint32_t i=0;i<x;i++)
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	dc 01       	movw	r26, r24
 626:	07 c0       	rjmp	.+14     	; 0x636 <triangleWave+0xe6>
 628:	42 e0       	ldi	r20, 0x02	; 2
 62a:	4a 95       	dec	r20
 62c:	f1 f7       	brne	.-4      	; 0x62a <triangleWave+0xda>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <triangleWave+0xe0>
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	a1 1d       	adc	r26, r1
 634:	b1 1d       	adc	r27, r1
 636:	80 17       	cp	r24, r16
 638:	91 07       	cpc	r25, r17
 63a:	a2 07       	cpc	r26, r18
 63c:	b3 07       	cpc	r27, r19
 63e:	a0 f3       	brcs	.-24     	; 0x628 <triangleWave+0xd8>
volatile double time_per_sample=time/(double) samples;
volatile double time_per_sample_us=1000000*time_per_sample/10;
uint32_t x=(uint32_t)time_per_sample_us;

	
	for(int Local_u8Iterator = 0 ; Local_u8Iterator < 104 ; Local_u8Iterator ++)
 640:	31 96       	adiw	r30, 0x01	; 1
 642:	e8 36       	cpi	r30, 0x68	; 104
 644:	f1 05       	cpc	r31, r1
 646:	04 f3       	brlt	.-64     	; 0x608 <triangleWave+0xb8>
			{_delay_us(1);}
	}		

		

}
 648:	2e 96       	adiw	r28, 0x0e	; 14
 64a:	0f b6       	in	r0, 0x3f	; 63
 64c:	f8 94       	cli
 64e:	de bf       	out	0x3e, r29	; 62
 650:	0f be       	out	0x3f, r0	; 63
 652:	cd bf       	out	0x3d, r28	; 61
 654:	df 91       	pop	r29
 656:	cf 91       	pop	r28
 658:	1f 91       	pop	r17
 65a:	0f 91       	pop	r16
 65c:	ff 90       	pop	r15
 65e:	bf 90       	pop	r11
 660:	af 90       	pop	r10
 662:	9f 90       	pop	r9
 664:	8f 90       	pop	r8
 666:	08 95       	ret

00000668 <sineWave>:

volatile void sineWave(uint8_t amp, uint8_t freq)
{
 668:	1f 93       	push	r17
 66a:	cf 93       	push	r28
 66c:	df 93       	push	r29
 66e:	00 d0       	rcall	.+0      	; 0x670 <sineWave+0x8>
 670:	00 d0       	rcall	.+0      	; 0x672 <sineWave+0xa>
 672:	cd b7       	in	r28, 0x3d	; 61
 674:	de b7       	in	r29, 0x3e	; 62
 676:	18 2f       	mov	r17, r24
volatile uint32_t x=(uint32_t) (810.0/(double)freq);
 678:	70 e0       	ldi	r23, 0x00	; 0
 67a:	80 e0       	ldi	r24, 0x00	; 0
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 86 06 	call	0xd0c	; 0xd0c <__floatunsisf>
 682:	9b 01       	movw	r18, r22
 684:	ac 01       	movw	r20, r24
 686:	60 e0       	ldi	r22, 0x00	; 0
 688:	70 e8       	ldi	r23, 0x80	; 128
 68a:	8a e4       	ldi	r24, 0x4A	; 74
 68c:	94 e4       	ldi	r25, 0x44	; 68
 68e:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 692:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
 696:	69 83       	std	Y+1, r22	; 0x01
 698:	7a 83       	std	Y+2, r23	; 0x02
 69a:	8b 83       	std	Y+3, r24	; 0x03
 69c:	9c 83       	std	Y+4, r25	; 0x04

	
		for(int Local_u8Iterator = 0 ; Local_u8Iterator < 100 ; Local_u8Iterator ++)
 69e:	20 e0       	ldi	r18, 0x00	; 0
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	22 c0       	rjmp	.+68     	; 0x6e8 <sineWave+0x80>
		{
			DAC_PORT = (int)((amp*arr_sine[Local_u8Iterator])/255) ;
 6a4:	f9 01       	movw	r30, r18
 6a6:	e1 5d       	subi	r30, 0xD1	; 209
 6a8:	fe 4f       	sbci	r31, 0xFE	; 254
 6aa:	80 81       	ld	r24, Z
 6ac:	18 9f       	mul	r17, r24
 6ae:	c0 01       	movw	r24, r0
 6b0:	11 24       	eor	r1, r1
 6b2:	6f ef       	ldi	r22, 0xFF	; 255
 6b4:	70 e0       	ldi	r23, 0x00	; 0
 6b6:	0e 94 81 07 	call	0xf02	; 0xf02 <__divmodhi4>
 6ba:	68 bb       	out	0x18, r22	; 24
				for(uint32_t i=0;i<x;i++)
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	dc 01       	movw	r26, r24
 6c2:	07 c0       	rjmp	.+14     	; 0x6d2 <sineWave+0x6a>
 6c4:	42 e0       	ldi	r20, 0x02	; 2
 6c6:	4a 95       	dec	r20
 6c8:	f1 f7       	brne	.-4      	; 0x6c6 <sineWave+0x5e>
 6ca:	00 c0       	rjmp	.+0      	; 0x6cc <sineWave+0x64>
 6cc:	01 96       	adiw	r24, 0x01	; 1
 6ce:	a1 1d       	adc	r26, r1
 6d0:	b1 1d       	adc	r27, r1
 6d2:	49 81       	ldd	r20, Y+1	; 0x01
 6d4:	5a 81       	ldd	r21, Y+2	; 0x02
 6d6:	6b 81       	ldd	r22, Y+3	; 0x03
 6d8:	7c 81       	ldd	r23, Y+4	; 0x04
 6da:	84 17       	cp	r24, r20
 6dc:	95 07       	cpc	r25, r21
 6de:	a6 07       	cpc	r26, r22
 6e0:	b7 07       	cpc	r27, r23
 6e2:	80 f3       	brcs	.-32     	; 0x6c4 <sineWave+0x5c>
volatile void sineWave(uint8_t amp, uint8_t freq)
{
volatile uint32_t x=(uint32_t) (810.0/(double)freq);

	
		for(int Local_u8Iterator = 0 ; Local_u8Iterator < 100 ; Local_u8Iterator ++)
 6e4:	2f 5f       	subi	r18, 0xFF	; 255
 6e6:	3f 4f       	sbci	r19, 0xFF	; 255
 6e8:	24 36       	cpi	r18, 0x64	; 100
 6ea:	31 05       	cpc	r19, r1
 6ec:	dc f2       	brlt	.-74     	; 0x6a4 <sineWave+0x3c>
				for(uint32_t i=0;i<x;i++)
				{_delay_us(1);}
		}
		
 
}
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	0f 90       	pop	r0
 6f4:	0f 90       	pop	r0
 6f6:	df 91       	pop	r29
 6f8:	cf 91       	pop	r28
 6fa:	1f 91       	pop	r17
 6fc:	08 95       	ret

000006fe <ramp>:
volatile void ramp(uint8_t amp, uint8_t freq)
{
 6fe:	8f 92       	push	r8
 700:	9f 92       	push	r9
 702:	af 92       	push	r10
 704:	bf 92       	push	r11
 706:	ff 92       	push	r15
 708:	0f 93       	push	r16
 70a:	1f 93       	push	r17
 70c:	cf 93       	push	r28
 70e:	df 93       	push	r29
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	2e 97       	sbiw	r28, 0x0e	; 14
 716:	0f b6       	in	r0, 0x3f	; 63
 718:	f8 94       	cli
 71a:	de bf       	out	0x3e, r29	; 62
 71c:	0f be       	out	0x3f, r0	; 63
 71e:	cd bf       	out	0x3d, r28	; 61
 720:	f8 2e       	mov	r15, r24
volatile double time=1.0/(double)freq;
 722:	70 e0       	ldi	r23, 0x00	; 0
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 94 86 06 	call	0xd0c	; 0xd0c <__floatunsisf>
 72c:	9b 01       	movw	r18, r22
 72e:	ac 01       	movw	r20, r24
 730:	60 e0       	ldi	r22, 0x00	; 0
 732:	70 e0       	ldi	r23, 0x00	; 0
 734:	80 e8       	ldi	r24, 0x80	; 128
 736:	9f e3       	ldi	r25, 0x3F	; 63
 738:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 73c:	69 83       	std	Y+1, r22	; 0x01
 73e:	7a 83       	std	Y+2, r23	; 0x02
 740:	8b 83       	std	Y+3, r24	; 0x03
 742:	9c 83       	std	Y+4, r25	; 0x04
volatile int samples=51;
 744:	83 e3       	ldi	r24, 0x33	; 51
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	9e 83       	std	Y+6, r25	; 0x06
 74a:	8d 83       	std	Y+5, r24	; 0x05
volatile double time_per_sample=time/(double) samples;
 74c:	89 80       	ldd	r8, Y+1	; 0x01
 74e:	9a 80       	ldd	r9, Y+2	; 0x02
 750:	ab 80       	ldd	r10, Y+3	; 0x03
 752:	bc 80       	ldd	r11, Y+4	; 0x04
 754:	6d 81       	ldd	r22, Y+5	; 0x05
 756:	7e 81       	ldd	r23, Y+6	; 0x06
 758:	07 2e       	mov	r0, r23
 75a:	00 0c       	add	r0, r0
 75c:	88 0b       	sbc	r24, r24
 75e:	99 0b       	sbc	r25, r25
 760:	0e 94 88 06 	call	0xd10	; 0xd10 <__floatsisf>
 764:	9b 01       	movw	r18, r22
 766:	ac 01       	movw	r20, r24
 768:	c5 01       	movw	r24, r10
 76a:	b4 01       	movw	r22, r8
 76c:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 770:	6f 83       	std	Y+7, r22	; 0x07
 772:	78 87       	std	Y+8, r23	; 0x08
 774:	89 87       	std	Y+9, r24	; 0x09
 776:	9a 87       	std	Y+10, r25	; 0x0a
volatile double time_per_sample_us=1000000*time_per_sample/3.8;
 778:	6f 81       	ldd	r22, Y+7	; 0x07
 77a:	78 85       	ldd	r23, Y+8	; 0x08
 77c:	89 85       	ldd	r24, Y+9	; 0x09
 77e:	9a 85       	ldd	r25, Y+10	; 0x0a
 780:	20 e0       	ldi	r18, 0x00	; 0
 782:	34 e2       	ldi	r19, 0x24	; 36
 784:	44 e7       	ldi	r20, 0x74	; 116
 786:	59 e4       	ldi	r21, 0x49	; 73
 788:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
 78c:	23 e3       	ldi	r18, 0x33	; 51
 78e:	33 e3       	ldi	r19, 0x33	; 51
 790:	43 e7       	ldi	r20, 0x73	; 115
 792:	50 e4       	ldi	r21, 0x40	; 64
 794:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 798:	6b 87       	std	Y+11, r22	; 0x0b
 79a:	7c 87       	std	Y+12, r23	; 0x0c
 79c:	8d 87       	std	Y+13, r24	; 0x0d
 79e:	9e 87       	std	Y+14, r25	; 0x0e
uint32_t x=(uint32_t)time_per_sample_us;
 7a0:	6b 85       	ldd	r22, Y+11	; 0x0b
 7a2:	7c 85       	ldd	r23, Y+12	; 0x0c
 7a4:	8d 85       	ldd	r24, Y+13	; 0x0d
 7a6:	9e 85       	ldd	r25, Y+14	; 0x0e
 7a8:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
 7ac:	8b 01       	movw	r16, r22
 7ae:	9c 01       	movw	r18, r24
	
	for(int Local_u8Iterator = 0 ; Local_u8Iterator < 51 ; Local_u8Iterator ++)
 7b0:	e0 e0       	ldi	r30, 0x00	; 0
 7b2:	f0 e0       	ldi	r31, 0x00	; 0
 7b4:	1d c0       	rjmp	.+58     	; 0x7f0 <ramp+0xf2>
	{
		DAC_PORT = (int)((amp*arr_ramp[Local_u8Iterator])/255) ;
 7b6:	df 01       	movw	r26, r30
 7b8:	a4 50       	subi	r26, 0x04	; 4
 7ba:	bf 4f       	sbci	r27, 0xFF	; 255
 7bc:	8c 91       	ld	r24, X
 7be:	f8 9e       	mul	r15, r24
 7c0:	c0 01       	movw	r24, r0
 7c2:	11 24       	eor	r1, r1
 7c4:	6f ef       	ldi	r22, 0xFF	; 255
 7c6:	70 e0       	ldi	r23, 0x00	; 0
 7c8:	0e 94 81 07 	call	0xf02	; 0xf02 <__divmodhi4>
 7cc:	68 bb       	out	0x18, r22	; 24
		for(uint32_t i=0;i<x;i++) _delay_us(1);
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	dc 01       	movw	r26, r24
 7d4:	07 c0       	rjmp	.+14     	; 0x7e4 <ramp+0xe6>
 7d6:	42 e0       	ldi	r20, 0x02	; 2
 7d8:	4a 95       	dec	r20
 7da:	f1 f7       	brne	.-4      	; 0x7d8 <ramp+0xda>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <ramp+0xe0>
 7de:	01 96       	adiw	r24, 0x01	; 1
 7e0:	a1 1d       	adc	r26, r1
 7e2:	b1 1d       	adc	r27, r1
 7e4:	80 17       	cp	r24, r16
 7e6:	91 07       	cpc	r25, r17
 7e8:	a2 07       	cpc	r26, r18
 7ea:	b3 07       	cpc	r27, r19
 7ec:	a0 f3       	brcs	.-24     	; 0x7d6 <ramp+0xd8>
volatile int samples=51;
volatile double time_per_sample=time/(double) samples;
volatile double time_per_sample_us=1000000*time_per_sample/3.8;
uint32_t x=(uint32_t)time_per_sample_us;
	
	for(int Local_u8Iterator = 0 ; Local_u8Iterator < 51 ; Local_u8Iterator ++)
 7ee:	31 96       	adiw	r30, 0x01	; 1
 7f0:	e3 33       	cpi	r30, 0x33	; 51
 7f2:	f1 05       	cpc	r31, r1
 7f4:	04 f3       	brlt	.-64     	; 0x7b6 <ramp+0xb8>
	{
		DAC_PORT = (int)((amp*arr_ramp[Local_u8Iterator])/255) ;
		for(uint32_t i=0;i<x;i++) _delay_us(1);
	}
}
 7f6:	2e 96       	adiw	r28, 0x0e	; 14
 7f8:	0f b6       	in	r0, 0x3f	; 63
 7fa:	f8 94       	cli
 7fc:	de bf       	out	0x3e, r29	; 62
 7fe:	0f be       	out	0x3f, r0	; 63
 800:	cd bf       	out	0x3d, r28	; 61
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	1f 91       	pop	r17
 808:	0f 91       	pop	r16
 80a:	ff 90       	pop	r15
 80c:	bf 90       	pop	r11
 80e:	af 90       	pop	r10
 810:	9f 90       	pop	r9
 812:	8f 90       	pop	r8
 814:	08 95       	ret

00000816 <sawtooth>:
volatile void sawtooth(uint8_t amp, uint8_t freq)
{
 816:	8f 92       	push	r8
 818:	9f 92       	push	r9
 81a:	af 92       	push	r10
 81c:	bf 92       	push	r11
 81e:	ff 92       	push	r15
 820:	0f 93       	push	r16
 822:	1f 93       	push	r17
 824:	cf 93       	push	r28
 826:	df 93       	push	r29
 828:	cd b7       	in	r28, 0x3d	; 61
 82a:	de b7       	in	r29, 0x3e	; 62
 82c:	2e 97       	sbiw	r28, 0x0e	; 14
 82e:	0f b6       	in	r0, 0x3f	; 63
 830:	f8 94       	cli
 832:	de bf       	out	0x3e, r29	; 62
 834:	0f be       	out	0x3f, r0	; 63
 836:	cd bf       	out	0x3d, r28	; 61
 838:	f8 2e       	mov	r15, r24
	volatile double time=1.0/(double)freq;
 83a:	70 e0       	ldi	r23, 0x00	; 0
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	0e 94 86 06 	call	0xd0c	; 0xd0c <__floatunsisf>
 844:	9b 01       	movw	r18, r22
 846:	ac 01       	movw	r20, r24
 848:	60 e0       	ldi	r22, 0x00	; 0
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	80 e8       	ldi	r24, 0x80	; 128
 84e:	9f e3       	ldi	r25, 0x3F	; 63
 850:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 854:	69 83       	std	Y+1, r22	; 0x01
 856:	7a 83       	std	Y+2, r23	; 0x02
 858:	8b 83       	std	Y+3, r24	; 0x03
 85a:	9c 83       	std	Y+4, r25	; 0x04
	volatile int samples=51;
 85c:	83 e3       	ldi	r24, 0x33	; 51
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	9e 83       	std	Y+6, r25	; 0x06
 862:	8d 83       	std	Y+5, r24	; 0x05
	volatile double time_per_sample=time/(double) samples;
 864:	89 80       	ldd	r8, Y+1	; 0x01
 866:	9a 80       	ldd	r9, Y+2	; 0x02
 868:	ab 80       	ldd	r10, Y+3	; 0x03
 86a:	bc 80       	ldd	r11, Y+4	; 0x04
 86c:	6d 81       	ldd	r22, Y+5	; 0x05
 86e:	7e 81       	ldd	r23, Y+6	; 0x06
 870:	07 2e       	mov	r0, r23
 872:	00 0c       	add	r0, r0
 874:	88 0b       	sbc	r24, r24
 876:	99 0b       	sbc	r25, r25
 878:	0e 94 88 06 	call	0xd10	; 0xd10 <__floatsisf>
 87c:	9b 01       	movw	r18, r22
 87e:	ac 01       	movw	r20, r24
 880:	c5 01       	movw	r24, r10
 882:	b4 01       	movw	r22, r8
 884:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 888:	6f 83       	std	Y+7, r22	; 0x07
 88a:	78 87       	std	Y+8, r23	; 0x08
 88c:	89 87       	std	Y+9, r24	; 0x09
 88e:	9a 87       	std	Y+10, r25	; 0x0a
	volatile double time_per_sample_us=1000000*time_per_sample/3.8;
 890:	6f 81       	ldd	r22, Y+7	; 0x07
 892:	78 85       	ldd	r23, Y+8	; 0x08
 894:	89 85       	ldd	r24, Y+9	; 0x09
 896:	9a 85       	ldd	r25, Y+10	; 0x0a
 898:	20 e0       	ldi	r18, 0x00	; 0
 89a:	34 e2       	ldi	r19, 0x24	; 36
 89c:	44 e7       	ldi	r20, 0x74	; 116
 89e:	59 e4       	ldi	r21, 0x49	; 73
 8a0:	0e 94 14 07 	call	0xe28	; 0xe28 <__mulsf3>
 8a4:	23 e3       	ldi	r18, 0x33	; 51
 8a6:	33 e3       	ldi	r19, 0x33	; 51
 8a8:	43 e7       	ldi	r20, 0x73	; 115
 8aa:	50 e4       	ldi	r21, 0x40	; 64
 8ac:	0e 94 e5 05 	call	0xbca	; 0xbca <__divsf3>
 8b0:	6b 87       	std	Y+11, r22	; 0x0b
 8b2:	7c 87       	std	Y+12, r23	; 0x0c
 8b4:	8d 87       	std	Y+13, r24	; 0x0d
 8b6:	9e 87       	std	Y+14, r25	; 0x0e
	uint32_t x=(uint32_t)time_per_sample_us;
 8b8:	6b 85       	ldd	r22, Y+11	; 0x0b
 8ba:	7c 85       	ldd	r23, Y+12	; 0x0c
 8bc:	8d 85       	ldd	r24, Y+13	; 0x0d
 8be:	9e 85       	ldd	r25, Y+14	; 0x0e
 8c0:	0e 94 57 06 	call	0xcae	; 0xcae <__fixunssfsi>
 8c4:	8b 01       	movw	r16, r22
 8c6:	9c 01       	movw	r18, r24
	
	for(int Local_u8Iterator = 0 ; Local_u8Iterator < 51 ; Local_u8Iterator ++)
 8c8:	e0 e0       	ldi	r30, 0x00	; 0
 8ca:	f0 e0       	ldi	r31, 0x00	; 0
 8cc:	1d c0       	rjmp	.+58     	; 0x908 <__stack+0xa9>
	{
		DAC_PORT = (int)((amp*arr_sawtooh[Local_u8Iterator])/255) ;
 8ce:	df 01       	movw	r26, r30
 8d0:	a8 53       	subi	r26, 0x38	; 56
 8d2:	bf 4f       	sbci	r27, 0xFF	; 255
 8d4:	8c 91       	ld	r24, X
 8d6:	f8 9e       	mul	r15, r24
 8d8:	c0 01       	movw	r24, r0
 8da:	11 24       	eor	r1, r1
 8dc:	6f ef       	ldi	r22, 0xFF	; 255
 8de:	70 e0       	ldi	r23, 0x00	; 0
 8e0:	0e 94 81 07 	call	0xf02	; 0xf02 <__divmodhi4>
 8e4:	68 bb       	out	0x18, r22	; 24
		for(uint32_t i=0;i<x;i++)
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	90 e0       	ldi	r25, 0x00	; 0
 8ea:	dc 01       	movw	r26, r24
 8ec:	07 c0       	rjmp	.+14     	; 0x8fc <__stack+0x9d>
 8ee:	42 e0       	ldi	r20, 0x02	; 2
 8f0:	4a 95       	dec	r20
 8f2:	f1 f7       	brne	.-4      	; 0x8f0 <__stack+0x91>
 8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <__stack+0x97>
 8f6:	01 96       	adiw	r24, 0x01	; 1
 8f8:	a1 1d       	adc	r26, r1
 8fa:	b1 1d       	adc	r27, r1
 8fc:	80 17       	cp	r24, r16
 8fe:	91 07       	cpc	r25, r17
 900:	a2 07       	cpc	r26, r18
 902:	b3 07       	cpc	r27, r19
 904:	a0 f3       	brcs	.-24     	; 0x8ee <__stack+0x8f>
	volatile int samples=51;
	volatile double time_per_sample=time/(double) samples;
	volatile double time_per_sample_us=1000000*time_per_sample/3.8;
	uint32_t x=(uint32_t)time_per_sample_us;
	
	for(int Local_u8Iterator = 0 ; Local_u8Iterator < 51 ; Local_u8Iterator ++)
 906:	31 96       	adiw	r30, 0x01	; 1
 908:	e3 33       	cpi	r30, 0x33	; 51
 90a:	f1 05       	cpc	r31, r1
 90c:	04 f3       	brlt	.-64     	; 0x8ce <__stack+0x6f>
	{
		DAC_PORT = (int)((amp*arr_sawtooh[Local_u8Iterator])/255) ;
		for(uint32_t i=0;i<x;i++)
		{_delay_us(1);}
	}
}
 90e:	2e 96       	adiw	r28, 0x0e	; 14
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	f8 94       	cli
 914:	de bf       	out	0x3e, r29	; 62
 916:	0f be       	out	0x3f, r0	; 63
 918:	cd bf       	out	0x3d, r28	; 61
 91a:	df 91       	pop	r29
 91c:	cf 91       	pop	r28
 91e:	1f 91       	pop	r17
 920:	0f 91       	pop	r16
 922:	ff 90       	pop	r15
 924:	bf 90       	pop	r11
 926:	af 90       	pop	r10
 928:	9f 90       	pop	r9
 92a:	8f 90       	pop	r8
 92c:	08 95       	ret

0000092e <WAVE_Init>:

void WAVE_Init(void)
{
 92e:	cf 93       	push	r28
 930:	df 93       	push	r29
 932:	00 d0       	rcall	.+0      	; 0x934 <WAVE_Init+0x6>
 934:	00 d0       	rcall	.+0      	; 0x936 <WAVE_Init+0x8>
 936:	1f 92       	push	r1
 938:	cd b7       	in	r28, 0x3d	; 61
 93a:	de b7       	in	r29, 0x3e	; 62
    
    /* Init UART driver. */
    UART_cfg my_uart_cfg;
    
    /* Set USART mode. */
    my_uart_cfg.UBRRL_cfg = (BAUD_RATE_VALUE)&0x00FF;
 93c:	83 e3       	ldi	r24, 0x33	; 51
 93e:	8a 83       	std	Y+2, r24	; 0x02
    my_uart_cfg.UBRRH_cfg = (((BAUD_RATE_VALUE)&0xFF00)>>8);
 940:	19 82       	std	Y+1, r1	; 0x01
    
    my_uart_cfg.UCSRA_cfg = 0;
 942:	1b 82       	std	Y+3, r1	; 0x03
    my_uart_cfg.UCSRB_cfg = (1<<RXEN)  | (1<<TXEN) | (1<<TXCIE) | (1<<RXCIE);
 944:	88 ed       	ldi	r24, 0xD8	; 216
 946:	8c 83       	std	Y+4, r24	; 0x04
    my_uart_cfg.UCSRC_cfg = (1<<URSEL) | (3<<UCSZ0);
 948:	86 e8       	ldi	r24, 0x86	; 134
 94a:	8d 83       	std	Y+5, r24	; 0x05
    
    UART_Init(&my_uart_cfg);
 94c:	ce 01       	movw	r24, r28
 94e:	01 96       	adiw	r24, 0x01	; 1
 950:	0e 94 c7 00 	call	0x18e	; 0x18e <UART_Init>
    
    
    /* Clear cmd_buffer. */
    for(i = 0; i < FULL_CMD_CNT; i += 1)
 954:	80 e0       	ldi	r24, 0x00	; 0
 956:	06 c0       	rjmp	.+12     	; 0x964 <WAVE_Init+0x36>
    {
        cmd_buffer[i] = 0;
 958:	e8 2f       	mov	r30, r24
 95a:	f0 e0       	ldi	r31, 0x00	; 0
 95c:	ed 53       	subi	r30, 0x3D	; 61
 95e:	fe 4f       	sbci	r31, 0xFE	; 254
 960:	10 82       	st	Z, r1
    
    UART_Init(&my_uart_cfg);
    
    
    /* Clear cmd_buffer. */
    for(i = 0; i < FULL_CMD_CNT; i += 1)
 962:	8f 5f       	subi	r24, 0xFF	; 255
 964:	89 30       	cpi	r24, 0x09	; 9
 966:	c0 f3       	brcs	.-16     	; 0x958 <WAVE_Init+0x2a>
    {
        cmd_buffer[i] = 0;
    }
    
    /* Initialize waveform array. */
    waveform[0] = squareWave;
 968:	e7 eb       	ldi	r30, 0xB7	; 183
 96a:	f1 e0       	ldi	r31, 0x01	; 1
 96c:	8e e0       	ldi	r24, 0x0E	; 14
 96e:	91 e0       	ldi	r25, 0x01	; 1
 970:	91 83       	std	Z+1, r25	; 0x01
 972:	80 83       	st	Z, r24
    waveform[1] = staircaseWave;
 974:	81 ea       	ldi	r24, 0xA1	; 161
 976:	91 e0       	ldi	r25, 0x01	; 1
 978:	93 83       	std	Z+3, r25	; 0x03
 97a:	82 83       	std	Z+2, r24	; 0x02
    waveform[2] = triangleWave;
 97c:	88 ea       	ldi	r24, 0xA8	; 168
 97e:	92 e0       	ldi	r25, 0x02	; 2
 980:	95 83       	std	Z+5, r25	; 0x05
 982:	84 83       	std	Z+4, r24	; 0x04
    waveform[3] = sineWave;
 984:	84 e3       	ldi	r24, 0x34	; 52
 986:	93 e0       	ldi	r25, 0x03	; 3
 988:	97 83       	std	Z+7, r25	; 0x07
 98a:	86 83       	std	Z+6, r24	; 0x06
	waveform[4] = ramp;
 98c:	8f e7       	ldi	r24, 0x7F	; 127
 98e:	93 e0       	ldi	r25, 0x03	; 3
 990:	91 87       	std	Z+9, r25	; 0x09
 992:	80 87       	std	Z+8, r24	; 0x08
	waveform[5] = sawtooth;
 994:	8b e0       	ldi	r24, 0x0B	; 11
 996:	94 e0       	ldi	r25, 0x04	; 4
 998:	93 87       	std	Z+11, r25	; 0x0b
 99a:	82 87       	std	Z+10, r24	; 0x0a

    /* Start with getting which wave to generate. */ 
    currentState = UPDATE_WAVE; 
 99c:	81 e0       	ldi	r24, 0x01	; 1
 99e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <currentState>
	DAC_DDR =0xff;
 9a2:	8f ef       	ldi	r24, 0xFF	; 255
 9a4:	87 bb       	out	0x17, r24	; 23
}
 9a6:	0f 90       	pop	r0
 9a8:	0f 90       	pop	r0
 9aa:	0f 90       	pop	r0
 9ac:	0f 90       	pop	r0
 9ae:	0f 90       	pop	r0
 9b0:	df 91       	pop	r29
 9b2:	cf 91       	pop	r28
 9b4:	08 95       	ret

000009b6 <WAVE_MainFunction>:
int g_flag=0;
int g_flag2=0;
void WAVE_MainFunction(void)
{    
 9b6:	cf 93       	push	r28
 9b8:	df 93       	push	r29
 9ba:	00 d0       	rcall	.+0      	; 0x9bc <WAVE_MainFunction+0x6>
 9bc:	1f 92       	push	r1
 9be:	cd b7       	in	r28, 0x3d	; 61
 9c0:	de b7       	in	r29, 0x3e	; 62
	

    // Main function must have two states,
    // First state is command parsing and waveform selection.
    // second state is waveform executing.
    switch(currentState)
 9c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <currentState>
 9c6:	88 23       	and	r24, r24
 9c8:	09 f4       	brne	.+2      	; 0x9cc <WAVE_MainFunction+0x16>
 9ca:	82 c0       	rjmp	.+260    	; 0xad0 <WAVE_MainFunction+0x11a>
 9cc:	81 30       	cpi	r24, 0x01	; 1
 9ce:	09 f0       	breq	.+2      	; 0x9d2 <WAVE_MainFunction+0x1c>
 9d0:	f6 c0       	rjmp	.+492    	; 0xbbe <WAVE_MainFunction+0x208>
    {
        case UPDATE_WAVE:
        {
            UART_SendPayload((uint8_t *)">", 1);
 9d2:	61 e0       	ldi	r22, 0x01	; 1
 9d4:	70 e0       	ldi	r23, 0x00	; 0
 9d6:	85 e9       	ldi	r24, 0x95	; 149
 9d8:	91 e0       	ldi	r25, 0x01	; 1
 9da:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_SendPayload>
            while (0 == UART_IsTxComplete());
 9de:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_IsTxComplete>
 9e2:	88 23       	and	r24, r24
 9e4:	e1 f3       	breq	.-8      	; 0x9de <WAVE_MainFunction+0x28>

            /* Receive the full buffer command. */
			if(g_flag==0)
 9e6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <g_flag>
 9ea:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <g_flag+0x1>
 9ee:	89 2b       	or	r24, r25
 9f0:	81 f4       	brne	.+32     	; 0xa12 <WAVE_MainFunction+0x5c>
            {
				UART_ReceivePayload(cmd_buffer, FULL_CMD_CNT);
 9f2:	69 e0       	ldi	r22, 0x09	; 9
 9f4:	70 e0       	ldi	r23, 0x00	; 0
 9f6:	83 ec       	ldi	r24, 0xC3	; 195
 9f8:	91 e0       	ldi	r25, 0x01	; 1
 9fa:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_ReceivePayload>
				g_flag=1;
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <g_flag+0x1>
 a06:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <g_flag>
				/* Pull unitl reception is complete. */
				while(0 == UART_IsRxComplete());
 a0a:	0e 94 00 01 	call	0x200	; 0x200 <UART_IsRxComplete>
 a0e:	88 23       	and	r24, r24
 a10:	e1 f3       	breq	.-8      	; 0xa0a <WAVE_MainFunction+0x54>
			}
            
            

            /* Check if the cmd is valid. */
            if((cmd_buffer[MARKER_START] == '@') && (cmd_buffer[MARKER_END] == ';'))
 a12:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <cmd_buffer>
 a16:	80 34       	cpi	r24, 0x40	; 64
 a18:	09 f0       	breq	.+2      	; 0xa1c <WAVE_MainFunction+0x66>
 a1a:	47 c0       	rjmp	.+142    	; 0xaaa <WAVE_MainFunction+0xf4>
 a1c:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <cmd_buffer+0x8>
 a20:	8b 33       	cpi	r24, 0x3B	; 59
 a22:	89 f0       	breq	.+34     	; 0xa46 <WAVE_MainFunction+0x90>
 a24:	80 e0       	ldi	r24, 0x00	; 0
 a26:	42 c0       	rjmp	.+132    	; 0xaac <WAVE_MainFunction+0xf6>
            {
                // Extract amplitude and freq values before sending them to the waveform generator.
                /* Compute amplitude. */
                {
                    char _buffer[_CMD_AMP_CNT];
                    for(uint8_t i = 0; i < _CMD_AMP_CNT; ++i) { _buffer[i] = cmd_buffer[AMP_OFFSET+i]; }
 a28:	82 2f       	mov	r24, r18
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	fc 01       	movw	r30, r24
 a2e:	eb 53       	subi	r30, 0x3B	; 59
 a30:	fe 4f       	sbci	r31, 0xFE	; 254
 a32:	30 81       	ld	r19, Z
 a34:	e1 e0       	ldi	r30, 0x01	; 1
 a36:	f0 e0       	ldi	r31, 0x00	; 0
 a38:	ec 0f       	add	r30, r28
 a3a:	fd 1f       	adc	r31, r29
 a3c:	e8 0f       	add	r30, r24
 a3e:	f9 1f       	adc	r31, r25
 a40:	30 83       	st	Z, r19
 a42:	2f 5f       	subi	r18, 0xFF	; 255
 a44:	01 c0       	rjmp	.+2      	; 0xa48 <WAVE_MainFunction+0x92>
 a46:	20 e0       	ldi	r18, 0x00	; 0
 a48:	23 30       	cpi	r18, 0x03	; 3
 a4a:	70 f3       	brcs	.-36     	; 0xa28 <WAVE_MainFunction+0x72>
                    amp_value = atoi(_buffer);
 a4c:	ce 01       	movw	r24, r28
 a4e:	01 96       	adiw	r24, 0x01	; 1
 a50:	0e 94 a9 07 	call	0xf52	; 0xf52 <atoi>
 a54:	80 93 b5 01 	sts	0x01B5, r24	; 0x8001b5 <amp_value>
                }

                /* Compute frequency. */
                {
                    char _buffer[_CMD_FRQ_CNT];
                    for(uint8_t i = 0; i < _CMD_FRQ_CNT; ++i) { _buffer[i] = cmd_buffer[FREQ_OFFSET+i]; }
 a58:	20 e0       	ldi	r18, 0x00	; 0
 a5a:	0e c0       	rjmp	.+28     	; 0xa78 <WAVE_MainFunction+0xc2>
 a5c:	82 2f       	mov	r24, r18
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	fc 01       	movw	r30, r24
 a62:	e8 53       	subi	r30, 0x38	; 56
 a64:	fe 4f       	sbci	r31, 0xFE	; 254
 a66:	30 81       	ld	r19, Z
 a68:	e1 e0       	ldi	r30, 0x01	; 1
 a6a:	f0 e0       	ldi	r31, 0x00	; 0
 a6c:	ec 0f       	add	r30, r28
 a6e:	fd 1f       	adc	r31, r29
 a70:	e8 0f       	add	r30, r24
 a72:	f9 1f       	adc	r31, r25
 a74:	30 83       	st	Z, r19
 a76:	2f 5f       	subi	r18, 0xFF	; 255
 a78:	23 30       	cpi	r18, 0x03	; 3
 a7a:	80 f3       	brcs	.-32     	; 0xa5c <WAVE_MainFunction+0xa6>
                    freq_value = atoi(_buffer);
 a7c:	ce 01       	movw	r24, r28
 a7e:	01 96       	adiw	r24, 0x01	; 1
 a80:	0e 94 a9 07 	call	0xf52	; 0xf52 <atoi>
 a84:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <freq_value>
                }

                /* Compute waveform. */
                {
                    waveform_index = cmd_buffer[WAVE_OFFSET] - '0';
 a88:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <cmd_buffer+0x1>
 a8c:	80 53       	subi	r24, 0x30	; 48
 a8e:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <waveform_index>
					g_flag2=0;
 a92:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <g_flag2+0x1>
 a96:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <g_flag2>
 a9a:	0a c0       	rjmp	.+20     	; 0xab0 <WAVE_MainFunction+0xfa>
            else
            {
               /* Clear cmd_buffer. */
                for(uint8_t i = 0; i < FULL_CMD_CNT; i += 1)
                {
                    cmd_buffer[i] = 0;
 a9c:	e8 2f       	mov	r30, r24
 a9e:	f0 e0       	ldi	r31, 0x00	; 0
 aa0:	ed 53       	subi	r30, 0x3D	; 61
 aa2:	fe 4f       	sbci	r31, 0xFE	; 254
 aa4:	10 82       	st	Z, r1
                }
            } 
            else
            {
               /* Clear cmd_buffer. */
                for(uint8_t i = 0; i < FULL_CMD_CNT; i += 1)
 aa6:	8f 5f       	subi	r24, 0xFF	; 255
 aa8:	01 c0       	rjmp	.+2      	; 0xaac <WAVE_MainFunction+0xf6>
 aaa:	80 e0       	ldi	r24, 0x00	; 0
 aac:	89 30       	cpi	r24, 0x09	; 9
 aae:	b0 f3       	brcs	.-20     	; 0xa9c <WAVE_MainFunction+0xe6>
                    cmd_buffer[i] = 0;
                }
            }

            // Trigger a new reception.
            UART_ReceivePayload(cmd_buffer, FULL_CMD_CNT);
 ab0:	69 e0       	ldi	r22, 0x09	; 9
 ab2:	70 e0       	ldi	r23, 0x00	; 0
 ab4:	83 ec       	ldi	r24, 0xC3	; 195
 ab6:	91 e0       	ldi	r25, 0x01	; 1
 ab8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <UART_ReceivePayload>

            UART_SendPayload((uint8_t *)"\r>", 2);
 abc:	62 e0       	ldi	r22, 0x02	; 2
 abe:	70 e0       	ldi	r23, 0x00	; 0
 ac0:	84 e9       	ldi	r24, 0x94	; 148
 ac2:	91 e0       	ldi	r25, 0x01	; 1
 ac4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_SendPayload>
            while (0 == UART_IsTxComplete());
 ac8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_IsTxComplete>
 acc:	88 23       	and	r24, r24
 ace:	e1 f3       	breq	.-8      	; 0xac8 <WAVE_MainFunction+0x112>
        }
        case GENERATE_WAVE:
        {
            // Execute waveform..
            if(waveform_index < WAVEFORM_NUM)
 ad0:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <waveform_index>
 ad4:	e6 30       	cpi	r30, 0x06	; 6
 ad6:	68 f4       	brcc	.+26     	; 0xaf2 <WAVE_MainFunction+0x13c>
            {
                waveform[waveform_index](amp_value, freq_value);
 ad8:	f0 e0       	ldi	r31, 0x00	; 0
 ada:	ee 0f       	add	r30, r30
 adc:	ff 1f       	adc	r31, r31
 ade:	e9 54       	subi	r30, 0x49	; 73
 ae0:	fe 4f       	sbci	r31, 0xFE	; 254
 ae2:	01 90       	ld	r0, Z+
 ae4:	f0 81       	ld	r31, Z
 ae6:	e0 2d       	mov	r30, r0
 ae8:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <freq_value>
 aec:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <amp_value>
 af0:	09 95       	icall
            }
            // Keep in generate wave if no command it received.
			if (g_flag2==0)
 af2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <g_flag2>
 af6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <g_flag2+0x1>
 afa:	89 2b       	or	r24, r25
 afc:	09 f0       	breq	.+2      	; 0xb00 <WAVE_MainFunction+0x14a>
 afe:	57 c0       	rjmp	.+174    	; 0xbae <WAVE_MainFunction+0x1f8>
			{
				switch(waveform_index)
 b00:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <waveform_index>
 b04:	82 30       	cpi	r24, 0x02	; 2
 b06:	11 f1       	breq	.+68     	; 0xb4c <WAVE_MainFunction+0x196>
 b08:	28 f4       	brcc	.+10     	; 0xb14 <WAVE_MainFunction+0x15e>
 b0a:	88 23       	and	r24, r24
 b0c:	49 f0       	breq	.+18     	; 0xb20 <WAVE_MainFunction+0x16a>
 b0e:	81 30       	cpi	r24, 0x01	; 1
 b10:	91 f0       	breq	.+36     	; 0xb36 <WAVE_MainFunction+0x180>
 b12:	47 c0       	rjmp	.+142    	; 0xba2 <WAVE_MainFunction+0x1ec>
 b14:	84 30       	cpi	r24, 0x04	; 4
 b16:	81 f1       	breq	.+96     	; 0xb78 <WAVE_MainFunction+0x1c2>
 b18:	20 f1       	brcs	.+72     	; 0xb62 <WAVE_MainFunction+0x1ac>
 b1a:	85 30       	cpi	r24, 0x05	; 5
 b1c:	c1 f1       	breq	.+112    	; 0xb8e <WAVE_MainFunction+0x1d8>
 b1e:	41 c0       	rjmp	.+130    	; 0xba2 <WAVE_MainFunction+0x1ec>
				{
					case 0: UART_SendPayload((uint8_t *)"0", 1); while (0 == UART_IsTxComplete()); break;
 b20:	61 e0       	ldi	r22, 0x01	; 1
 b22:	70 e0       	ldi	r23, 0x00	; 0
 b24:	87 e9       	ldi	r24, 0x97	; 151
 b26:	91 e0       	ldi	r25, 0x01	; 1
 b28:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_SendPayload>
 b2c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_IsTxComplete>
 b30:	88 23       	and	r24, r24
 b32:	e1 f3       	breq	.-8      	; 0xb2c <WAVE_MainFunction+0x176>
 b34:	36 c0       	rjmp	.+108    	; 0xba2 <WAVE_MainFunction+0x1ec>
					case 1: UART_SendPayload((uint8_t *)"1", 1); while (0 == UART_IsTxComplete()); break;
 b36:	61 e0       	ldi	r22, 0x01	; 1
 b38:	70 e0       	ldi	r23, 0x00	; 0
 b3a:	89 e9       	ldi	r24, 0x99	; 153
 b3c:	91 e0       	ldi	r25, 0x01	; 1
 b3e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_SendPayload>
 b42:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_IsTxComplete>
 b46:	88 23       	and	r24, r24
 b48:	e1 f3       	breq	.-8      	; 0xb42 <WAVE_MainFunction+0x18c>
 b4a:	2b c0       	rjmp	.+86     	; 0xba2 <WAVE_MainFunction+0x1ec>
					case 2: UART_SendPayload((uint8_t *)"2", 1); while (0 == UART_IsTxComplete()); break;
 b4c:	61 e0       	ldi	r22, 0x01	; 1
 b4e:	70 e0       	ldi	r23, 0x00	; 0
 b50:	8b e9       	ldi	r24, 0x9B	; 155
 b52:	91 e0       	ldi	r25, 0x01	; 1
 b54:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_SendPayload>
 b58:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_IsTxComplete>
 b5c:	88 23       	and	r24, r24
 b5e:	e1 f3       	breq	.-8      	; 0xb58 <WAVE_MainFunction+0x1a2>
 b60:	20 c0       	rjmp	.+64     	; 0xba2 <WAVE_MainFunction+0x1ec>
					case 3: UART_SendPayload((uint8_t *)"3", 1); while (0 == UART_IsTxComplete()); break;
 b62:	61 e0       	ldi	r22, 0x01	; 1
 b64:	70 e0       	ldi	r23, 0x00	; 0
 b66:	8d e9       	ldi	r24, 0x9D	; 157
 b68:	91 e0       	ldi	r25, 0x01	; 1
 b6a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_SendPayload>
 b6e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_IsTxComplete>
 b72:	88 23       	and	r24, r24
 b74:	e1 f3       	breq	.-8      	; 0xb6e <WAVE_MainFunction+0x1b8>
 b76:	15 c0       	rjmp	.+42     	; 0xba2 <WAVE_MainFunction+0x1ec>
					case 4: UART_SendPayload((uint8_t *)"4", 1); while (0 == UART_IsTxComplete()); break;
 b78:	61 e0       	ldi	r22, 0x01	; 1
 b7a:	70 e0       	ldi	r23, 0x00	; 0
 b7c:	8f e9       	ldi	r24, 0x9F	; 159
 b7e:	91 e0       	ldi	r25, 0x01	; 1
 b80:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_SendPayload>
 b84:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_IsTxComplete>
 b88:	88 23       	and	r24, r24
 b8a:	e1 f3       	breq	.-8      	; 0xb84 <WAVE_MainFunction+0x1ce>
 b8c:	0a c0       	rjmp	.+20     	; 0xba2 <WAVE_MainFunction+0x1ec>
					case 5: UART_SendPayload((uint8_t *)"5", 1); while (0 == UART_IsTxComplete()); break;
 b8e:	61 e0       	ldi	r22, 0x01	; 1
 b90:	70 e0       	ldi	r23, 0x00	; 0
 b92:	81 ea       	ldi	r24, 0xA1	; 161
 b94:	91 e0       	ldi	r25, 0x01	; 1
 b96:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <UART_SendPayload>
 b9a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <UART_IsTxComplete>
 b9e:	88 23       	and	r24, r24
 ba0:	e1 f3       	breq	.-8      	; 0xb9a <WAVE_MainFunction+0x1e4>
					case 6:break;
				}
				g_flag2=1;
 ba2:	81 e0       	ldi	r24, 0x01	; 1
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <g_flag2+0x1>
 baa:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <g_flag2>
			}
			
            currentState = (1 == UART_IsRxComplete()) ? UPDATE_WAVE : GENERATE_WAVE;
 bae:	0e 94 00 01 	call	0x200	; 0x200 <UART_IsRxComplete>
 bb2:	91 e0       	ldi	r25, 0x01	; 1
 bb4:	81 30       	cpi	r24, 0x01	; 1
 bb6:	09 f0       	breq	.+2      	; 0xbba <WAVE_MainFunction+0x204>
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	90 93 b6 01 	sts	0x01B6, r25	; 0x8001b6 <currentState>
            break;
        }
        default: {/* Do nothing.*/}
    }
}
 bbe:	0f 90       	pop	r0
 bc0:	0f 90       	pop	r0
 bc2:	0f 90       	pop	r0
 bc4:	df 91       	pop	r29
 bc6:	cf 91       	pop	r28
 bc8:	08 95       	ret

00000bca <__divsf3>:
 bca:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__divsf3x>
 bce:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__fp_round>
 bd2:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscB>
 bd6:	58 f0       	brcs	.+22     	; 0xbee <__divsf3+0x24>
 bd8:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_pscA>
 bdc:	40 f0       	brcs	.+16     	; 0xbee <__divsf3+0x24>
 bde:	29 f4       	brne	.+10     	; 0xbea <__divsf3+0x20>
 be0:	5f 3f       	cpi	r21, 0xFF	; 255
 be2:	29 f0       	breq	.+10     	; 0xbee <__divsf3+0x24>
 be4:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_inf>
 be8:	51 11       	cpse	r21, r1
 bea:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
 bee:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_nan>

00000bf2 <__divsf3x>:
 bf2:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_split3>
 bf6:	68 f3       	brcs	.-38     	; 0xbd2 <__divsf3+0x8>

00000bf8 <__divsf3_pse>:
 bf8:	99 23       	and	r25, r25
 bfa:	b1 f3       	breq	.-20     	; 0xbe8 <__divsf3+0x1e>
 bfc:	55 23       	and	r21, r21
 bfe:	91 f3       	breq	.-28     	; 0xbe4 <__divsf3+0x1a>
 c00:	95 1b       	sub	r25, r21
 c02:	55 0b       	sbc	r21, r21
 c04:	bb 27       	eor	r27, r27
 c06:	aa 27       	eor	r26, r26
 c08:	62 17       	cp	r22, r18
 c0a:	73 07       	cpc	r23, r19
 c0c:	84 07       	cpc	r24, r20
 c0e:	38 f0       	brcs	.+14     	; 0xc1e <__divsf3_pse+0x26>
 c10:	9f 5f       	subi	r25, 0xFF	; 255
 c12:	5f 4f       	sbci	r21, 0xFF	; 255
 c14:	22 0f       	add	r18, r18
 c16:	33 1f       	adc	r19, r19
 c18:	44 1f       	adc	r20, r20
 c1a:	aa 1f       	adc	r26, r26
 c1c:	a9 f3       	breq	.-22     	; 0xc08 <__divsf3_pse+0x10>
 c1e:	35 d0       	rcall	.+106    	; 0xc8a <__divsf3_pse+0x92>
 c20:	0e 2e       	mov	r0, r30
 c22:	3a f0       	brmi	.+14     	; 0xc32 <__divsf3_pse+0x3a>
 c24:	e0 e8       	ldi	r30, 0x80	; 128
 c26:	32 d0       	rcall	.+100    	; 0xc8c <__divsf3_pse+0x94>
 c28:	91 50       	subi	r25, 0x01	; 1
 c2a:	50 40       	sbci	r21, 0x00	; 0
 c2c:	e6 95       	lsr	r30
 c2e:	00 1c       	adc	r0, r0
 c30:	ca f7       	brpl	.-14     	; 0xc24 <__divsf3_pse+0x2c>
 c32:	2b d0       	rcall	.+86     	; 0xc8a <__divsf3_pse+0x92>
 c34:	fe 2f       	mov	r31, r30
 c36:	29 d0       	rcall	.+82     	; 0xc8a <__divsf3_pse+0x92>
 c38:	66 0f       	add	r22, r22
 c3a:	77 1f       	adc	r23, r23
 c3c:	88 1f       	adc	r24, r24
 c3e:	bb 1f       	adc	r27, r27
 c40:	26 17       	cp	r18, r22
 c42:	37 07       	cpc	r19, r23
 c44:	48 07       	cpc	r20, r24
 c46:	ab 07       	cpc	r26, r27
 c48:	b0 e8       	ldi	r27, 0x80	; 128
 c4a:	09 f0       	breq	.+2      	; 0xc4e <__divsf3_pse+0x56>
 c4c:	bb 0b       	sbc	r27, r27
 c4e:	80 2d       	mov	r24, r0
 c50:	bf 01       	movw	r22, r30
 c52:	ff 27       	eor	r31, r31
 c54:	93 58       	subi	r25, 0x83	; 131
 c56:	5f 4f       	sbci	r21, 0xFF	; 255
 c58:	3a f0       	brmi	.+14     	; 0xc68 <__divsf3_pse+0x70>
 c5a:	9e 3f       	cpi	r25, 0xFE	; 254
 c5c:	51 05       	cpc	r21, r1
 c5e:	78 f0       	brcs	.+30     	; 0xc7e <__divsf3_pse+0x86>
 c60:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_inf>
 c64:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
 c68:	5f 3f       	cpi	r21, 0xFF	; 255
 c6a:	e4 f3       	brlt	.-8      	; 0xc64 <__divsf3_pse+0x6c>
 c6c:	98 3e       	cpi	r25, 0xE8	; 232
 c6e:	d4 f3       	brlt	.-12     	; 0xc64 <__divsf3_pse+0x6c>
 c70:	86 95       	lsr	r24
 c72:	77 95       	ror	r23
 c74:	67 95       	ror	r22
 c76:	b7 95       	ror	r27
 c78:	f7 95       	ror	r31
 c7a:	9f 5f       	subi	r25, 0xFF	; 255
 c7c:	c9 f7       	brne	.-14     	; 0xc70 <__divsf3_pse+0x78>
 c7e:	88 0f       	add	r24, r24
 c80:	91 1d       	adc	r25, r1
 c82:	96 95       	lsr	r25
 c84:	87 95       	ror	r24
 c86:	97 f9       	bld	r25, 7
 c88:	08 95       	ret
 c8a:	e1 e0       	ldi	r30, 0x01	; 1
 c8c:	66 0f       	add	r22, r22
 c8e:	77 1f       	adc	r23, r23
 c90:	88 1f       	adc	r24, r24
 c92:	bb 1f       	adc	r27, r27
 c94:	62 17       	cp	r22, r18
 c96:	73 07       	cpc	r23, r19
 c98:	84 07       	cpc	r24, r20
 c9a:	ba 07       	cpc	r27, r26
 c9c:	20 f0       	brcs	.+8      	; 0xca6 <__divsf3_pse+0xae>
 c9e:	62 1b       	sub	r22, r18
 ca0:	73 0b       	sbc	r23, r19
 ca2:	84 0b       	sbc	r24, r20
 ca4:	ba 0b       	sbc	r27, r26
 ca6:	ee 1f       	adc	r30, r30
 ca8:	88 f7       	brcc	.-30     	; 0xc8c <__divsf3_pse+0x94>
 caa:	e0 95       	com	r30
 cac:	08 95       	ret

00000cae <__fixunssfsi>:
 cae:	0e 94 f3 06 	call	0xde6	; 0xde6 <__fp_splitA>
 cb2:	88 f0       	brcs	.+34     	; 0xcd6 <__fixunssfsi+0x28>
 cb4:	9f 57       	subi	r25, 0x7F	; 127
 cb6:	98 f0       	brcs	.+38     	; 0xcde <__fixunssfsi+0x30>
 cb8:	b9 2f       	mov	r27, r25
 cba:	99 27       	eor	r25, r25
 cbc:	b7 51       	subi	r27, 0x17	; 23
 cbe:	b0 f0       	brcs	.+44     	; 0xcec <__fixunssfsi+0x3e>
 cc0:	e1 f0       	breq	.+56     	; 0xcfa <__fixunssfsi+0x4c>
 cc2:	66 0f       	add	r22, r22
 cc4:	77 1f       	adc	r23, r23
 cc6:	88 1f       	adc	r24, r24
 cc8:	99 1f       	adc	r25, r25
 cca:	1a f0       	brmi	.+6      	; 0xcd2 <__fixunssfsi+0x24>
 ccc:	ba 95       	dec	r27
 cce:	c9 f7       	brne	.-14     	; 0xcc2 <__fixunssfsi+0x14>
 cd0:	14 c0       	rjmp	.+40     	; 0xcfa <__fixunssfsi+0x4c>
 cd2:	b1 30       	cpi	r27, 0x01	; 1
 cd4:	91 f0       	breq	.+36     	; 0xcfa <__fixunssfsi+0x4c>
 cd6:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fp_zero>
 cda:	b1 e0       	ldi	r27, 0x01	; 1
 cdc:	08 95       	ret
 cde:	0c 94 0d 07 	jmp	0xe1a	; 0xe1a <__fp_zero>
 ce2:	67 2f       	mov	r22, r23
 ce4:	78 2f       	mov	r23, r24
 ce6:	88 27       	eor	r24, r24
 ce8:	b8 5f       	subi	r27, 0xF8	; 248
 cea:	39 f0       	breq	.+14     	; 0xcfa <__fixunssfsi+0x4c>
 cec:	b9 3f       	cpi	r27, 0xF9	; 249
 cee:	cc f3       	brlt	.-14     	; 0xce2 <__fixunssfsi+0x34>
 cf0:	86 95       	lsr	r24
 cf2:	77 95       	ror	r23
 cf4:	67 95       	ror	r22
 cf6:	b3 95       	inc	r27
 cf8:	d9 f7       	brne	.-10     	; 0xcf0 <__fixunssfsi+0x42>
 cfa:	3e f4       	brtc	.+14     	; 0xd0a <__fixunssfsi+0x5c>
 cfc:	90 95       	com	r25
 cfe:	80 95       	com	r24
 d00:	70 95       	com	r23
 d02:	61 95       	neg	r22
 d04:	7f 4f       	sbci	r23, 0xFF	; 255
 d06:	8f 4f       	sbci	r24, 0xFF	; 255
 d08:	9f 4f       	sbci	r25, 0xFF	; 255
 d0a:	08 95       	ret

00000d0c <__floatunsisf>:
 d0c:	e8 94       	clt
 d0e:	09 c0       	rjmp	.+18     	; 0xd22 <__floatsisf+0x12>

00000d10 <__floatsisf>:
 d10:	97 fb       	bst	r25, 7
 d12:	3e f4       	brtc	.+14     	; 0xd22 <__floatsisf+0x12>
 d14:	90 95       	com	r25
 d16:	80 95       	com	r24
 d18:	70 95       	com	r23
 d1a:	61 95       	neg	r22
 d1c:	7f 4f       	sbci	r23, 0xFF	; 255
 d1e:	8f 4f       	sbci	r24, 0xFF	; 255
 d20:	9f 4f       	sbci	r25, 0xFF	; 255
 d22:	99 23       	and	r25, r25
 d24:	a9 f0       	breq	.+42     	; 0xd50 <__floatsisf+0x40>
 d26:	f9 2f       	mov	r31, r25
 d28:	96 e9       	ldi	r25, 0x96	; 150
 d2a:	bb 27       	eor	r27, r27
 d2c:	93 95       	inc	r25
 d2e:	f6 95       	lsr	r31
 d30:	87 95       	ror	r24
 d32:	77 95       	ror	r23
 d34:	67 95       	ror	r22
 d36:	b7 95       	ror	r27
 d38:	f1 11       	cpse	r31, r1
 d3a:	f8 cf       	rjmp	.-16     	; 0xd2c <__floatsisf+0x1c>
 d3c:	fa f4       	brpl	.+62     	; 0xd7c <__floatsisf+0x6c>
 d3e:	bb 0f       	add	r27, r27
 d40:	11 f4       	brne	.+4      	; 0xd46 <__floatsisf+0x36>
 d42:	60 ff       	sbrs	r22, 0
 d44:	1b c0       	rjmp	.+54     	; 0xd7c <__floatsisf+0x6c>
 d46:	6f 5f       	subi	r22, 0xFF	; 255
 d48:	7f 4f       	sbci	r23, 0xFF	; 255
 d4a:	8f 4f       	sbci	r24, 0xFF	; 255
 d4c:	9f 4f       	sbci	r25, 0xFF	; 255
 d4e:	16 c0       	rjmp	.+44     	; 0xd7c <__floatsisf+0x6c>
 d50:	88 23       	and	r24, r24
 d52:	11 f0       	breq	.+4      	; 0xd58 <__floatsisf+0x48>
 d54:	96 e9       	ldi	r25, 0x96	; 150
 d56:	11 c0       	rjmp	.+34     	; 0xd7a <__floatsisf+0x6a>
 d58:	77 23       	and	r23, r23
 d5a:	21 f0       	breq	.+8      	; 0xd64 <__floatsisf+0x54>
 d5c:	9e e8       	ldi	r25, 0x8E	; 142
 d5e:	87 2f       	mov	r24, r23
 d60:	76 2f       	mov	r23, r22
 d62:	05 c0       	rjmp	.+10     	; 0xd6e <__floatsisf+0x5e>
 d64:	66 23       	and	r22, r22
 d66:	71 f0       	breq	.+28     	; 0xd84 <__floatsisf+0x74>
 d68:	96 e8       	ldi	r25, 0x86	; 134
 d6a:	86 2f       	mov	r24, r22
 d6c:	70 e0       	ldi	r23, 0x00	; 0
 d6e:	60 e0       	ldi	r22, 0x00	; 0
 d70:	2a f0       	brmi	.+10     	; 0xd7c <__floatsisf+0x6c>
 d72:	9a 95       	dec	r25
 d74:	66 0f       	add	r22, r22
 d76:	77 1f       	adc	r23, r23
 d78:	88 1f       	adc	r24, r24
 d7a:	da f7       	brpl	.-10     	; 0xd72 <__floatsisf+0x62>
 d7c:	88 0f       	add	r24, r24
 d7e:	96 95       	lsr	r25
 d80:	87 95       	ror	r24
 d82:	97 f9       	bld	r25, 7
 d84:	08 95       	ret

00000d86 <__fp_inf>:
 d86:	97 f9       	bld	r25, 7
 d88:	9f 67       	ori	r25, 0x7F	; 127
 d8a:	80 e8       	ldi	r24, 0x80	; 128
 d8c:	70 e0       	ldi	r23, 0x00	; 0
 d8e:	60 e0       	ldi	r22, 0x00	; 0
 d90:	08 95       	ret

00000d92 <__fp_nan>:
 d92:	9f ef       	ldi	r25, 0xFF	; 255
 d94:	80 ec       	ldi	r24, 0xC0	; 192
 d96:	08 95       	ret

00000d98 <__fp_pscA>:
 d98:	00 24       	eor	r0, r0
 d9a:	0a 94       	dec	r0
 d9c:	16 16       	cp	r1, r22
 d9e:	17 06       	cpc	r1, r23
 da0:	18 06       	cpc	r1, r24
 da2:	09 06       	cpc	r0, r25
 da4:	08 95       	ret

00000da6 <__fp_pscB>:
 da6:	00 24       	eor	r0, r0
 da8:	0a 94       	dec	r0
 daa:	12 16       	cp	r1, r18
 dac:	13 06       	cpc	r1, r19
 dae:	14 06       	cpc	r1, r20
 db0:	05 06       	cpc	r0, r21
 db2:	08 95       	ret

00000db4 <__fp_round>:
 db4:	09 2e       	mov	r0, r25
 db6:	03 94       	inc	r0
 db8:	00 0c       	add	r0, r0
 dba:	11 f4       	brne	.+4      	; 0xdc0 <__fp_round+0xc>
 dbc:	88 23       	and	r24, r24
 dbe:	52 f0       	brmi	.+20     	; 0xdd4 <__fp_round+0x20>
 dc0:	bb 0f       	add	r27, r27
 dc2:	40 f4       	brcc	.+16     	; 0xdd4 <__fp_round+0x20>
 dc4:	bf 2b       	or	r27, r31
 dc6:	11 f4       	brne	.+4      	; 0xdcc <__fp_round+0x18>
 dc8:	60 ff       	sbrs	r22, 0
 dca:	04 c0       	rjmp	.+8      	; 0xdd4 <__fp_round+0x20>
 dcc:	6f 5f       	subi	r22, 0xFF	; 255
 dce:	7f 4f       	sbci	r23, 0xFF	; 255
 dd0:	8f 4f       	sbci	r24, 0xFF	; 255
 dd2:	9f 4f       	sbci	r25, 0xFF	; 255
 dd4:	08 95       	ret

00000dd6 <__fp_split3>:
 dd6:	57 fd       	sbrc	r21, 7
 dd8:	90 58       	subi	r25, 0x80	; 128
 dda:	44 0f       	add	r20, r20
 ddc:	55 1f       	adc	r21, r21
 dde:	59 f0       	breq	.+22     	; 0xdf6 <__fp_splitA+0x10>
 de0:	5f 3f       	cpi	r21, 0xFF	; 255
 de2:	71 f0       	breq	.+28     	; 0xe00 <__fp_splitA+0x1a>
 de4:	47 95       	ror	r20

00000de6 <__fp_splitA>:
 de6:	88 0f       	add	r24, r24
 de8:	97 fb       	bst	r25, 7
 dea:	99 1f       	adc	r25, r25
 dec:	61 f0       	breq	.+24     	; 0xe06 <__fp_splitA+0x20>
 dee:	9f 3f       	cpi	r25, 0xFF	; 255
 df0:	79 f0       	breq	.+30     	; 0xe10 <__fp_splitA+0x2a>
 df2:	87 95       	ror	r24
 df4:	08 95       	ret
 df6:	12 16       	cp	r1, r18
 df8:	13 06       	cpc	r1, r19
 dfa:	14 06       	cpc	r1, r20
 dfc:	55 1f       	adc	r21, r21
 dfe:	f2 cf       	rjmp	.-28     	; 0xde4 <__fp_split3+0xe>
 e00:	46 95       	lsr	r20
 e02:	f1 df       	rcall	.-30     	; 0xde6 <__fp_splitA>
 e04:	08 c0       	rjmp	.+16     	; 0xe16 <__fp_splitA+0x30>
 e06:	16 16       	cp	r1, r22
 e08:	17 06       	cpc	r1, r23
 e0a:	18 06       	cpc	r1, r24
 e0c:	99 1f       	adc	r25, r25
 e0e:	f1 cf       	rjmp	.-30     	; 0xdf2 <__fp_splitA+0xc>
 e10:	86 95       	lsr	r24
 e12:	71 05       	cpc	r23, r1
 e14:	61 05       	cpc	r22, r1
 e16:	08 94       	sec
 e18:	08 95       	ret

00000e1a <__fp_zero>:
 e1a:	e8 94       	clt

00000e1c <__fp_szero>:
 e1c:	bb 27       	eor	r27, r27
 e1e:	66 27       	eor	r22, r22
 e20:	77 27       	eor	r23, r23
 e22:	cb 01       	movw	r24, r22
 e24:	97 f9       	bld	r25, 7
 e26:	08 95       	ret

00000e28 <__mulsf3>:
 e28:	0e 94 27 07 	call	0xe4e	; 0xe4e <__mulsf3x>
 e2c:	0c 94 da 06 	jmp	0xdb4	; 0xdb4 <__fp_round>
 e30:	0e 94 cc 06 	call	0xd98	; 0xd98 <__fp_pscA>
 e34:	38 f0       	brcs	.+14     	; 0xe44 <__mulsf3+0x1c>
 e36:	0e 94 d3 06 	call	0xda6	; 0xda6 <__fp_pscB>
 e3a:	20 f0       	brcs	.+8      	; 0xe44 <__mulsf3+0x1c>
 e3c:	95 23       	and	r25, r21
 e3e:	11 f0       	breq	.+4      	; 0xe44 <__mulsf3+0x1c>
 e40:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_inf>
 e44:	0c 94 c9 06 	jmp	0xd92	; 0xd92 <__fp_nan>
 e48:	11 24       	eor	r1, r1
 e4a:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>

00000e4e <__mulsf3x>:
 e4e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_split3>
 e52:	70 f3       	brcs	.-36     	; 0xe30 <__mulsf3+0x8>

00000e54 <__mulsf3_pse>:
 e54:	95 9f       	mul	r25, r21
 e56:	c1 f3       	breq	.-16     	; 0xe48 <__mulsf3+0x20>
 e58:	95 0f       	add	r25, r21
 e5a:	50 e0       	ldi	r21, 0x00	; 0
 e5c:	55 1f       	adc	r21, r21
 e5e:	62 9f       	mul	r22, r18
 e60:	f0 01       	movw	r30, r0
 e62:	72 9f       	mul	r23, r18
 e64:	bb 27       	eor	r27, r27
 e66:	f0 0d       	add	r31, r0
 e68:	b1 1d       	adc	r27, r1
 e6a:	63 9f       	mul	r22, r19
 e6c:	aa 27       	eor	r26, r26
 e6e:	f0 0d       	add	r31, r0
 e70:	b1 1d       	adc	r27, r1
 e72:	aa 1f       	adc	r26, r26
 e74:	64 9f       	mul	r22, r20
 e76:	66 27       	eor	r22, r22
 e78:	b0 0d       	add	r27, r0
 e7a:	a1 1d       	adc	r26, r1
 e7c:	66 1f       	adc	r22, r22
 e7e:	82 9f       	mul	r24, r18
 e80:	22 27       	eor	r18, r18
 e82:	b0 0d       	add	r27, r0
 e84:	a1 1d       	adc	r26, r1
 e86:	62 1f       	adc	r22, r18
 e88:	73 9f       	mul	r23, r19
 e8a:	b0 0d       	add	r27, r0
 e8c:	a1 1d       	adc	r26, r1
 e8e:	62 1f       	adc	r22, r18
 e90:	83 9f       	mul	r24, r19
 e92:	a0 0d       	add	r26, r0
 e94:	61 1d       	adc	r22, r1
 e96:	22 1f       	adc	r18, r18
 e98:	74 9f       	mul	r23, r20
 e9a:	33 27       	eor	r19, r19
 e9c:	a0 0d       	add	r26, r0
 e9e:	61 1d       	adc	r22, r1
 ea0:	23 1f       	adc	r18, r19
 ea2:	84 9f       	mul	r24, r20
 ea4:	60 0d       	add	r22, r0
 ea6:	21 1d       	adc	r18, r1
 ea8:	82 2f       	mov	r24, r18
 eaa:	76 2f       	mov	r23, r22
 eac:	6a 2f       	mov	r22, r26
 eae:	11 24       	eor	r1, r1
 eb0:	9f 57       	subi	r25, 0x7F	; 127
 eb2:	50 40       	sbci	r21, 0x00	; 0
 eb4:	9a f0       	brmi	.+38     	; 0xedc <__mulsf3_pse+0x88>
 eb6:	f1 f0       	breq	.+60     	; 0xef4 <__mulsf3_pse+0xa0>
 eb8:	88 23       	and	r24, r24
 eba:	4a f0       	brmi	.+18     	; 0xece <__mulsf3_pse+0x7a>
 ebc:	ee 0f       	add	r30, r30
 ebe:	ff 1f       	adc	r31, r31
 ec0:	bb 1f       	adc	r27, r27
 ec2:	66 1f       	adc	r22, r22
 ec4:	77 1f       	adc	r23, r23
 ec6:	88 1f       	adc	r24, r24
 ec8:	91 50       	subi	r25, 0x01	; 1
 eca:	50 40       	sbci	r21, 0x00	; 0
 ecc:	a9 f7       	brne	.-22     	; 0xeb8 <__mulsf3_pse+0x64>
 ece:	9e 3f       	cpi	r25, 0xFE	; 254
 ed0:	51 05       	cpc	r21, r1
 ed2:	80 f0       	brcs	.+32     	; 0xef4 <__mulsf3_pse+0xa0>
 ed4:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <__fp_inf>
 ed8:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__fp_szero>
 edc:	5f 3f       	cpi	r21, 0xFF	; 255
 ede:	e4 f3       	brlt	.-8      	; 0xed8 <__mulsf3_pse+0x84>
 ee0:	98 3e       	cpi	r25, 0xE8	; 232
 ee2:	d4 f3       	brlt	.-12     	; 0xed8 <__mulsf3_pse+0x84>
 ee4:	86 95       	lsr	r24
 ee6:	77 95       	ror	r23
 ee8:	67 95       	ror	r22
 eea:	b7 95       	ror	r27
 eec:	f7 95       	ror	r31
 eee:	e7 95       	ror	r30
 ef0:	9f 5f       	subi	r25, 0xFF	; 255
 ef2:	c1 f7       	brne	.-16     	; 0xee4 <__mulsf3_pse+0x90>
 ef4:	fe 2b       	or	r31, r30
 ef6:	88 0f       	add	r24, r24
 ef8:	91 1d       	adc	r25, r1
 efa:	96 95       	lsr	r25
 efc:	87 95       	ror	r24
 efe:	97 f9       	bld	r25, 7
 f00:	08 95       	ret

00000f02 <__divmodhi4>:
 f02:	97 fb       	bst	r25, 7
 f04:	07 2e       	mov	r0, r23
 f06:	16 f4       	brtc	.+4      	; 0xf0c <__divmodhi4+0xa>
 f08:	00 94       	com	r0
 f0a:	07 d0       	rcall	.+14     	; 0xf1a <__divmodhi4_neg1>
 f0c:	77 fd       	sbrc	r23, 7
 f0e:	09 d0       	rcall	.+18     	; 0xf22 <__divmodhi4_neg2>
 f10:	0e 94 95 07 	call	0xf2a	; 0xf2a <__udivmodhi4>
 f14:	07 fc       	sbrc	r0, 7
 f16:	05 d0       	rcall	.+10     	; 0xf22 <__divmodhi4_neg2>
 f18:	3e f4       	brtc	.+14     	; 0xf28 <__divmodhi4_exit>

00000f1a <__divmodhi4_neg1>:
 f1a:	90 95       	com	r25
 f1c:	81 95       	neg	r24
 f1e:	9f 4f       	sbci	r25, 0xFF	; 255
 f20:	08 95       	ret

00000f22 <__divmodhi4_neg2>:
 f22:	70 95       	com	r23
 f24:	61 95       	neg	r22
 f26:	7f 4f       	sbci	r23, 0xFF	; 255

00000f28 <__divmodhi4_exit>:
 f28:	08 95       	ret

00000f2a <__udivmodhi4>:
 f2a:	aa 1b       	sub	r26, r26
 f2c:	bb 1b       	sub	r27, r27
 f2e:	51 e1       	ldi	r21, 0x11	; 17
 f30:	07 c0       	rjmp	.+14     	; 0xf40 <__udivmodhi4_ep>

00000f32 <__udivmodhi4_loop>:
 f32:	aa 1f       	adc	r26, r26
 f34:	bb 1f       	adc	r27, r27
 f36:	a6 17       	cp	r26, r22
 f38:	b7 07       	cpc	r27, r23
 f3a:	10 f0       	brcs	.+4      	; 0xf40 <__udivmodhi4_ep>
 f3c:	a6 1b       	sub	r26, r22
 f3e:	b7 0b       	sbc	r27, r23

00000f40 <__udivmodhi4_ep>:
 f40:	88 1f       	adc	r24, r24
 f42:	99 1f       	adc	r25, r25
 f44:	5a 95       	dec	r21
 f46:	a9 f7       	brne	.-22     	; 0xf32 <__udivmodhi4_loop>
 f48:	80 95       	com	r24
 f4a:	90 95       	com	r25
 f4c:	bc 01       	movw	r22, r24
 f4e:	cd 01       	movw	r24, r26
 f50:	08 95       	ret

00000f52 <atoi>:
 f52:	fc 01       	movw	r30, r24
 f54:	88 27       	eor	r24, r24
 f56:	99 27       	eor	r25, r25
 f58:	e8 94       	clt
 f5a:	21 91       	ld	r18, Z+
 f5c:	20 32       	cpi	r18, 0x20	; 32
 f5e:	e9 f3       	breq	.-6      	; 0xf5a <atoi+0x8>
 f60:	29 30       	cpi	r18, 0x09	; 9
 f62:	10 f0       	brcs	.+4      	; 0xf68 <atoi+0x16>
 f64:	2e 30       	cpi	r18, 0x0E	; 14
 f66:	c8 f3       	brcs	.-14     	; 0xf5a <atoi+0x8>
 f68:	2b 32       	cpi	r18, 0x2B	; 43
 f6a:	41 f0       	breq	.+16     	; 0xf7c <atoi+0x2a>
 f6c:	2d 32       	cpi	r18, 0x2D	; 45
 f6e:	39 f4       	brne	.+14     	; 0xf7e <atoi+0x2c>
 f70:	68 94       	set
 f72:	04 c0       	rjmp	.+8      	; 0xf7c <atoi+0x2a>
 f74:	0e 94 c7 07 	call	0xf8e	; 0xf8e <__mulhi_const_10>
 f78:	82 0f       	add	r24, r18
 f7a:	91 1d       	adc	r25, r1
 f7c:	21 91       	ld	r18, Z+
 f7e:	20 53       	subi	r18, 0x30	; 48
 f80:	2a 30       	cpi	r18, 0x0A	; 10
 f82:	c0 f3       	brcs	.-16     	; 0xf74 <atoi+0x22>
 f84:	1e f4       	brtc	.+6      	; 0xf8c <atoi+0x3a>
 f86:	90 95       	com	r25
 f88:	81 95       	neg	r24
 f8a:	9f 4f       	sbci	r25, 0xFF	; 255
 f8c:	08 95       	ret

00000f8e <__mulhi_const_10>:
 f8e:	7a e0       	ldi	r23, 0x0A	; 10
 f90:	97 9f       	mul	r25, r23
 f92:	90 2d       	mov	r25, r0
 f94:	87 9f       	mul	r24, r23
 f96:	80 2d       	mov	r24, r0
 f98:	91 0d       	add	r25, r1
 f9a:	11 24       	eor	r1, r1
 f9c:	08 95       	ret

00000f9e <_exit>:
 f9e:	f8 94       	cli

00000fa0 <__stop_program>:
 fa0:	ff cf       	rjmp	.-2      	; 0xfa0 <__stop_program>
